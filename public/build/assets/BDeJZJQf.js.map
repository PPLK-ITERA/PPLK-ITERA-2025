{"version":3,"file":"BDeJZJQf.js","sources":["../../../resources/js/Pages/Tesla/Page.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DefaultLayout from \"@/Layouts/DefaultLayout\";\nimport bg_1 from \"!assets/tesla/bg-1.png\";\nimport axios from 'axios';\n\ntype Cell = {\n    letter: string;\n    isBlack: boolean;\n    number?: number;\n    isSelected: boolean;\n    isHighlighted: boolean;\n    isCorrect: boolean;\n    isWrong: boolean;\n};\n\ntype Clue = {\n    number: number;\n    clue: string;\n    answer: string;\n    direction: 'across' | 'down';\n    startRow: number;\n    startCol: number;\n    isAnswered: boolean;\n};\n\nexport default function Page() {\n    const [currentTab, setCurrentTab] = useState<'Petunjuk Soal' | 'Mendatar' | 'Menurun'>('Petunjuk Soal');\n    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n    const [isProgressModalOpen, setIsProgressModalOpen] = useState(false);\n    const [isResultModalOpen, setIsResultModalOpen] = useState(false);\n    const [isPetunjukModalOpen, setIsPetunjukModalOpen] = useState(false);\n    const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);\n    const [selectedCell, setSelectedCell] = useState<{ row: number, col: number } | null>(null);\n    const [selectedClue, setSelectedClue] = useState<Clue | null>(null);\n    const [inputDirection, setInputDirection] = useState<'across' | 'down'>('across');\n    const [clues, setClues] = useState<{\n        across: Clue[];\n        down: Clue[];\n    }>({ across: [], down: [] });\n    const [grid, setGrid] = useState<Cell[][]>([]);\n    const [time, setTime] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(true);\n    const [selectedQuestion, setSelectedQuestion] = useState<string>('');\n    const [userAnswer, setUserAnswer] = useState<string>('');\n    const [result, setResult] = useState({ correct: 0, wrong: 0 });\n    const [loading, setLoading] = useState(true);\n    const [started, setStarted] = useState(false);\n    const [tempWrongAnswers, setTempWrongAnswers] = useState<{ [key: string]: string }>({});\n    const [history, setHistory] = useState<{\n        time: number;\n        percentage: number;\n        answered: number;\n        total: number;\n        date: string;\n        score?: number; // Tambah score di tipe history\n    }[]>([]);\n\n    const answerInputRef = useRef<HTMLInputElement>(null);\n\n    const bg = bg_1;\n\n    // Tambah state untuk menyimpan initial clues/grid\n    const [initialClues, setInitialClues] = useState<{ across: Clue[]; down: Clue[] }>({ across: [], down: [] });\n    const [initialGrid, setInitialGrid] = useState<Cell[][]>([]);\n\n    // Fetch clues/grid sekali saat mount, simpan ke initialClues/initialGrid\n    useEffect(() => {\n        const fetchInitial = async () => {\n            setLoading(true);\n            try {\n                const res = await axios.get('/api/admin/tesla/');\n                const arr = res.data.data;\n                let maxRow = 0;\n                let maxCol = 0;\n                arr.forEach((c: any) => {\n                    if (c.tipe === 'mendatar') {\n                        maxRow = Math.max(maxRow, c.start_row);\n                        maxCol = Math.max(maxCol, c.start_col + (c.jawaban?.length || 0) - 1);\n                    } else if (c.tipe === 'menurun') {\n                        maxRow = Math.max(maxRow, c.start_row + (c.jawaban?.length || 0) - 1);\n                        maxCol = Math.max(maxCol, c.start_col);\n                    }\n                });\n                const size = Math.max(maxRow + 1, maxCol + 1, 10);\n                const across = arr.filter((c: any) => c.tipe === 'mendatar').map((c: any) => ({\n                    number: c.nomor,\n                    clue: c.pertanyaan,\n                    answer: c.jawaban,\n                    direction: 'across',\n                    startRow: c.start_row,\n                    startCol: c.start_col,\n                    isAnswered: false,\n                }));\n                const down = arr.filter((c: any) => c.tipe === 'menurun').map((c: any) => ({\n                    number: c.nomor,\n                    clue: c.pertanyaan,\n                    answer: c.jawaban,\n                    direction: 'down',\n                    startRow: c.start_row,\n                    startCol: c.start_col,\n                    isAnswered: false,\n                }));\n                const newGrid: Cell[][] = Array(size).fill(null).map(() =>\n                    Array(size).fill(null).map(() => ({\n                        letter: '',\n                        isBlack: false,\n                        isSelected: false,\n                        isHighlighted: false,\n                        isCorrect: false,\n                        isWrong: false,\n                    }))\n                );\n                arr.forEach((c: any) => {\n                    if (\n                        c.start_row >= 0 && c.start_row < size &&\n                        c.start_col >= 0 && c.start_col < size\n                    ) {\n                        newGrid[c.start_row][c.start_col].number = c.nomor;\n                    }\n                });\n                setInitialClues({ across, down });\n                setInitialGrid(newGrid);\n            } catch {\n                setInitialClues({ across: [], down: [] });\n                setInitialGrid([]);\n            }\n            setLoading(false);\n        };\n        fetchInitial();\n    }, []);\n\n    // Fetch clues from API and initialize grid\n    useEffect(() => {\n        if (started) {\n            fetchClues();\n            setIsPlaying(true);\n            setTime(0);\n        }\n        // eslint-disable-next-line\n    }, [started]);\n\n    useEffect(() => {\n        if (!started) return;\n        const timer = setInterval(() => {\n            if (isPlaying) setTime(prev => prev + 1);\n        }, 1000);\n        return () => clearInterval(timer);\n    }, [isPlaying, started]);\n\n    // Ubah fetchClues agar menerima data dari initialClues/initialGrid\n    const fetchClues = () => {\n        setLoading(true);\n        setClues({\n            across: initialClues.across.map(c => ({ ...c, isAnswered: false })),\n            down: initialClues.down.map(c => ({ ...c, isAnswered: false })),\n        });\n        setGrid(initialGrid.map(row => row.map(cell => ({\n            ...cell,\n            letter: '',\n            isSelected: false,\n            isHighlighted: false,\n            isCorrect: false,\n            isWrong: false,\n        }))));\n        setLoading(false);\n    };\n\n    // Fungsi untuk menghapus semua jawaban salah dari board (termasuk valuenya)\n    const clearAllWrongAnswers = () => {\n        const newGrid = grid.map(row => row.map(cell => {\n            if (cell.isWrong) {\n                return {\n                    ...cell,\n                    letter: '' // Hapus value huruf yang salah\n                };\n            }\n            return cell;\n        }));\n        setGrid(newGrid);\n        setTempWrongAnswers({});\n    };\n\n    const handleQuestionSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const value = e.target.value;\n        setSelectedQuestion(value);\n        setUserAnswer('');\n\n        // Hapus semua jawaban salah dari board saat pindah soal\n        clearAllWrongAnswers();\n\n        if (value) {\n            const [direction, numberStr] = value.split('-');\n            const number = parseInt(numberStr);\n\n            const clueList = direction === 'across' ? clues.across : clues.down;\n            const clue = clueList.find(c => c.number === number);\n\n            if (clue) {\n                setInputDirection(direction as 'across' | 'down');\n                highlightClueCells(clue);\n                setTimeout(() => {\n                    if (answerInputRef.current) {\n                        answerInputRef.current.focus();\n                    }\n                }, 0);\n            }\n        }\n    };\n\n    // Fungsi untuk menghapus jawaban salah sementara dari grid\n    const clearTempWrongAnswer = (clue: Clue, questionKey: string) => {\n        if (!tempWrongAnswers[questionKey]) return;\n        const answer = tempWrongAnswers[questionKey];\n        const newGrid = [...grid.map(row => [...row])];\n        if (clue.direction === 'across') {\n            for (let i = 0; i < clue.answer.length; i++) {\n                const col = clue.startCol + i;\n                if (col >= newGrid[clue.startRow].length) continue;\n                // Hanya hapus jika cell bukan jawaban benar\n                if (!newGrid[clue.startRow][col].isCorrect) {\n                    newGrid[clue.startRow][col].letter = '';\n                    newGrid[clue.startRow][col].isWrong = false;\n                }\n            }\n        } else {\n            for (let i = 0; i < clue.answer.length; i++) {\n                const row = clue.startRow + i;\n                if (row >= newGrid.length) continue;\n                if (!newGrid[row][clue.startCol].isCorrect) {\n                    newGrid[row][clue.startCol].letter = '';\n                    newGrid[row][clue.startCol].isWrong = false;\n                }\n            }\n        }\n        setGrid(newGrid);\n        setTempWrongAnswers(prev => {\n            const copy = { ...prev };\n            delete copy[questionKey];\n            return copy;\n        });\n    };\n\n    // Highlight clue cells, tapi jangan reset isCorrect (biar hijau tetap muncul jika benar)\n    const highlightClueCells = (clue: Clue) => {\n        // Reset semua isHighlighted, isSelected, dan isWrong\n        const newGrid = grid.map(rowArr =>\n            rowArr.map(cell => ({\n                ...cell,\n                isHighlighted: false,\n                isSelected: false,\n                isWrong: false, // <-- reset merah setiap pindah soal\n                // JANGAN reset isCorrect di sini!\n            }))\n        );\n\n        if (clue.direction === 'across') {\n            for (let c = clue.startCol; c < clue.startCol + clue.answer.length; c++) {\n                if (c < newGrid[clue.startRow].length) {\n                    newGrid[clue.startRow][c].isHighlighted = true;\n                }\n            }\n            newGrid[clue.startRow][clue.startCol].isSelected = true;\n            setSelectedCell({ row: clue.startRow, col: clue.startCol });\n        } else {\n            for (let r = clue.startRow; r < clue.startRow + clue.answer.length; r++) {\n                if (r < newGrid.length) {\n                    newGrid[r][clue.startCol].isHighlighted = true;\n                }\n            }\n            newGrid[clue.startRow][clue.startCol].isSelected = true;\n            setSelectedCell({ row: clue.startRow, col: clue.startCol });\n        }\n\n        setSelectedClue(clue);\n        setGrid(newGrid);\n    };\n\n    // Submit answer to API\n    const handleAnswerSubmit = async () => {\n        if (!selectedQuestion || !userAnswer || !selectedClue) return;\n        const answer = userAnswer.toUpperCase();\n        // Validate answer length\n        if (answer.length !== selectedClue.answer.length) {\n            // ...bisa pakai toast/modal, tidak pakai alert\n            return;\n        }\n\n        // Cek ke backend\n        let hasil = 'salah';\n        try {\n            const res = await axios.post(`/api/admin/tesla/${selectedClue.number}`, { jawaban: userAnswer });\n            hasil = res.data.hasil;\n        } catch {\n            hasil = 'salah';\n        }\n\n        // Cek apakah grid cukup, jika tidak, resize grid\n        let newGrid = [...grid.map(row => [...row])];\n        let size = newGrid.length;\n        let needResize = false;\n        if (selectedClue.direction === 'across') {\n            const lastCol = selectedClue.startCol + selectedClue.answer.length - 1;\n            if (lastCol >= size) {\n                needResize = true;\n            }\n        } else {\n            const lastRow = selectedClue.startRow + selectedClue.answer.length - 1;\n            if (lastRow >= size) {\n                needResize = true;\n            }\n        }\n        if (hasil === 'benar' && needResize) {\n            const newSize = Math.max(\n                selectedClue.direction === 'across'\n                    ? selectedClue.startCol + selectedClue.answer.length\n                    : size,\n                selectedClue.direction === 'down'\n                    ? selectedClue.startRow + selectedClue.answer.length\n                    : size,\n                size + 1\n            );\n            const emptyCell = () => ({\n                letter: '',\n                isBlack: false,\n                isSelected: false,\n                isHighlighted: false,\n                isCorrect: false,\n                isWrong: false,\n            });\n            while (newGrid.length < newSize) {\n                newGrid.push(Array(newSize).fill(null).map(emptyCell));\n            }\n            for (let i = 0; i < newGrid.length; i++) {\n                while (newGrid[i].length < newSize) {\n                    newGrid[i].push(emptyCell());\n                }\n            }\n            size = newSize;\n        }\n\n        // Reset previous isWrong for this clue, but do NOT reset isCorrect or letter if already correct\n        if (selectedClue.direction === 'across') {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const col = selectedClue.startCol + i;\n                if (col >= newGrid[selectedClue.startRow].length) continue;\n                if (!newGrid[selectedClue.startRow][col].isCorrect) {\n                    newGrid[selectedClue.startRow][col].isWrong = false;\n                    if (hasil === 'salah') {\n                        newGrid[selectedClue.startRow][col].letter = '';\n                    }\n                }\n            }\n        } else {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const row = selectedClue.startRow + i;\n                if (row >= newGrid.length) continue;\n                if (!newGrid[row][selectedClue.startCol].isCorrect) {\n                    newGrid[row][selectedClue.startCol].isWrong = false;\n                    if (hasil === 'salah') {\n                        newGrid[row][selectedClue.startCol].letter = '';\n                    }\n                }\n            }\n        }\n\n        // Update grid visual\n        if (selectedClue.direction === 'across') {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const col = selectedClue.startCol + i;\n                if (col >= newGrid[selectedClue.startRow].length) continue;\n                if (hasil === 'benar') {\n                    newGrid[selectedClue.startRow][col].letter = answer[i] || '';\n                    newGrid[selectedClue.startRow][col].isCorrect = true;\n                    newGrid[selectedClue.startRow][col].isWrong = false;\n                } else {\n                    // Salah: hanya kasih background merah jika belum hijau, letter tetap kosong\n                    if (!newGrid[selectedClue.startRow][col].isCorrect) {\n                        newGrid[selectedClue.startRow][col].letter = '';\n                        newGrid[selectedClue.startRow][col].isWrong = true;\n                    }\n                }\n            }\n        } else {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const row = selectedClue.startRow + i;\n                if (row >= newGrid.length) continue;\n                if (hasil === 'benar') {\n                    newGrid[row][selectedClue.startCol].letter = answer[i] || '';\n                    newGrid[row][selectedClue.startCol].isCorrect = true;\n                    newGrid[row][selectedClue.startCol].isWrong = false;\n                } else {\n                    if (!newGrid[row][selectedClue.startCol].isCorrect) {\n                        newGrid[row][selectedClue.startCol].letter = '';\n                        newGrid[row][selectedClue.startCol].isWrong = true;\n                    }\n                }\n            }\n        }\n\n        setClues(prev => {\n            if (selectedClue.direction === 'across') {\n                return {\n                    ...prev,\n                    across: prev.across.map(c =>\n                        c.number === selectedClue.number ? { ...c, isAnswered: hasil === 'benar' } : c\n                    )\n                };\n            } else {\n                return {\n                    ...prev,\n                    down: prev.down.map(c =>\n                        c.number === selectedClue.number ? { ...c, isAnswered: hasil === 'benar' } : c\n                    )\n                };\n            }\n        });\n\n        setGrid(newGrid);\n\n        setTempWrongAnswers(prev => {\n            const key = selectedQuestion;\n            if (hasil === 'salah') {\n                return { ...prev, [key]: '' }; // Tidak perlu simpan jawaban salah\n            } else {\n                const copy = { ...prev };\n                delete copy[key];\n                return copy;\n            }\n        });\n\n        setUserAnswer('');\n        setSelectedQuestion('');\n        setSelectedClue(null);\n    };\n\n    const checkAllAnswers = () => {\n        const newGrid = [...grid];\n        let correctCount = 0;\n        let wrongCount = 0;\n\n        // Check all clues\n        const newClues = { ...clues };\n\n        for (const clueType of ['across', 'down'] as const) {\n            newClues[clueType] = newClues[clueType].map(clue => {\n                let isCorrect = true;\n                const answer = clue.answer;\n\n                // Reset previous states: hanya reset isWrong, jangan reset isCorrect\n                for (let i = 0; i < answer.length; i++) {\n                    const row = clue.direction === 'across' ? clue.startRow : clue.startRow + i;\n                    const col = clue.direction === 'across' ? clue.startCol + i : clue.startCol;\n\n                    if (row >= newGrid.length || col >= newGrid[0].length) continue;\n                    if (!newGrid[row][col].isCorrect) {\n                        newGrid[row][col].isWrong = false;\n                    }\n                }\n\n                // Check new answer\n                for (let i = 0; i < answer.length; i++) {\n                    const row = clue.direction === 'across' ? clue.startRow : clue.startRow + i;\n                    const col = clue.direction === 'across' ? clue.startCol + i : clue.startCol;\n\n                    if (row >= newGrid.length || col >= newGrid[0].length) continue;\n\n                    if (newGrid[row][col].letter !== answer[i]) {\n                        if (!newGrid[row][col].isCorrect) {\n                            newGrid[row][col].isWrong = true;\n                        }\n                        isCorrect = false;\n                    } else {\n                        newGrid[row][col].isCorrect = true;\n                        newGrid[row][col].isWrong = false;\n                    }\n                }\n\n                if (isCorrect) {\n                    correctCount++;\n                } else {\n                    wrongCount++;\n                }\n\n                return { ...clue, isAnswered: isCorrect };\n            });\n        }\n\n        setGrid(newGrid);\n        setClues(newClues);\n        setResult({ correct: correctCount, wrong: wrongCount });\n        setIsResultModalOpen(true);\n    };\n\n    // Reset puzzle dan hapus semua progress (jawaban, benar/salah, dsb)\n    const resetPuzzle = () => {\n        setClues({\n            across: initialClues.across.map(c => ({ ...c, isAnswered: false })),\n            down: initialClues.down.map(c => ({ ...c, isAnswered: false })),\n        });\n        setGrid(initialGrid.map(row => row.map(cell => ({\n            ...cell,\n            letter: '',\n            isSelected: false,\n            isHighlighted: false,\n            isCorrect: false,\n            isWrong: false,\n        }))));\n        setSelectedCell(null);\n        setSelectedClue(null);\n        setSelectedQuestion('');\n        setUserAnswer('');\n        setTime(0);\n        setIsPlaying(true);\n        setStarted(true);\n        setTempWrongAnswers({});\n        setResult({ correct: 0, wrong: 0 });\n    };\n\n    const togglePause = () => {\n        setIsPlaying(prev => !prev);\n    };\n\n    const formatTime = (seconds: number) => {\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    // Calculate progress, always return 0% if not started or total is 0\n    const calculateProgress = () => {\n        const totalClues = clues.across.length + clues.down.length;\n        if (!started || totalClues === 0) {\n            return {\n                percentage: 0,\n                answered: 0,\n                total: totalClues\n            };\n        }\n        const answeredClues = [...clues.across, ...clues.down].filter(clue => {\n            // Check if all letters in the answer are correct\n            const answer = clue.answer;\n            let allCorrect = true;\n            for (let i = 0; i < answer.length; i++) {\n                const row = clue.direction === 'across' ? clue.startRow : clue.startRow + i;\n                const col = clue.direction === 'across' ? clue.startCol + i : clue.startCol;\n                if (row >= grid.length || col >= grid[0].length) continue;\n                if (grid[row][col].letter !== answer[i]) {\n                    allCorrect = false;\n                    break;\n                }\n            }\n            return allCorrect;\n        }).length;\n        return {\n            percentage: Math.round((answeredClues / totalClues) * 100),\n            answered: answeredClues,\n            total: totalClues\n        };\n    };\n\n    const progress = calculateProgress();\n\n    // Mobile Modal Component for Petunjuk\n    const MobileModal = ({ isOpen, onClose, children, title }: {\n        isOpen: boolean;\n        onClose: () => void;\n        children: React.ReactNode;\n        title: string;\n    }) => {\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end md:hidden\">\n                <div className=\"bg-white w-full max-h-[80vh] rounded-t-lg overflow-hidden\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                        <h3 className=\"font-medium \">{title}</h3>\n                        <button\n                            onClick={onClose}\n                            className=\"text-white text-xl font-bold\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                    <div className=\"max-h-[70vh] overflow-y-auto\">{children}</div>\n                </div>\n            </div>\n        );\n    };\n\n    // Progress Modal Component\n    const ProgressModal = ({ isOpen, onClose }: {\n        isOpen: boolean;\n        onClose: () => void;\n    }) => {\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 md:hidden\">\n                <div className=\"bg-white w-full max-w-sm rounded-lg overflow-hidden\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                        <h3 className=\"font-medium\">Progress</h3>\n                        <button\n                            onClick={onClose}\n                            className=\"text-white text-xl font-bold\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                    <div className=\"p-4\">\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-4\">\n                            <div\n                                className=\"bg-orange-500 h-2 rounded-full\"\n                                style={{ width: `${progress.percentage}%` }}\n                            ></div>\n                        </div>\n                        <div className=\"flex justify-between text-sm text-gray-600\">\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{formatTime(time)}</div>\n                                <div>Waktu</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{progress.percentage}%</div>\n                                <div>Selesai</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{progress.answered}/{progress.total}</div>\n                                <div>Pertanyaan</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    // Result Modal Component\n    const ResultModal = ({ isOpen, onClose, correct, wrong }: {\n        isOpen: boolean;\n        onClose: () => void;\n        correct: number;\n        wrong: number;\n    }) => {\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-start justify-center p-4 pt-[15vh]\">\n                <div className=\"bg-white w-full max-w-md mx-auto rounded-lg overflow-hidden\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                        <h3 className=\"font-medium\">Hasil Pemeriksaan</h3>\n                        <button\n                            onClick={onClose}\n                            className=\"text-white text-xl font-bold\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                    <div className=\"p-6\">\n                        <div className=\"flex justify-between mb-4\">\n                            <div className=\"text-center\">\n                                <div className=\"text-3xl font-bold text-green-600\">{correct}</div>\n                                <div className=\"text-sm text-gray-600\">Benar</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-3xl font-bold text-red-600\">{wrong}</div>\n                                <div className=\"text-sm text-gray-600\">Salah</div>\n                            </div>\n                        </div>\n                        <div className=\"text-center mt-4\">\n                            <div className=\"text-lg font-medium text-gray-800\">\n                                {correct === progress.total ?\n                                    \"Selamat! Anda telah menyelesaikan semua soal dengan benar!\" :\n                                    correct > wrong ?\n                                        \"Bagus! Tingkatkan lagi jawaban yang salah!\" :\n                                        \"Coba periksa kembali jawaban Anda!\"}\n                            </div>\n                        </div>\n                        <button\n                            onClick={onClose}\n                            className=\"mt-6 w-full bg-orange-500 text-white py-2 rounded-md hover:bg-orange-600\"\n                        >\n                            Tutup\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    // Helper: get clue by position\n    const getClueByPosition = (row: number, col: number): Clue | null => {\n        // Cari clue yang startRow/startCol sama\n        let clue = clues.across.find(c => c.startRow === row && c.startCol === col);\n        if (clue) return clue;\n        clue = clues.down.find(c => c.startRow === row && c.startCol === col);\n        return clue || null;\n    };\n\n    // Helper: get first clue (across > down)\n    const getFirstClue = () => {\n        if (initialClues.across.length > 0) return { clue: initialClues.across[0], key: `across-${initialClues.across[0].number}` };\n        if (initialClues.down.length > 0) return { clue: initialClues.down[0], key: `down-${initialClues.down[0].number}` };\n        return null;\n    };\n\n    // Fungsi untuk simpan progres ke backend (pakai POST /api/progres)\n    const handleSaveProgress = async () => {\n        try {\n            await axios.post('/api/progres/', {\n                tanggal: new Date().toISOString(),\n                waktu: time,\n                selesai: progress.percentage,\n                jawaban: `${progress.answered}/${progress.total}`,\n                skor: progress.answered * 10,\n            });\n        } catch (e: any) {\n            if (e?.response?.status === 401) {\n                alert('Anda belum login. Silakan login untuk menyimpan progres.');\n            }\n            // Optional: tampilkan error toast/modal\n        }\n        setHistory(prev => {\n            const newHistory = [\n                {\n                    time,\n                    percentage: progress.percentage,\n                    answered: progress.answered,\n                    total: progress.total,\n                    date: new Date().toLocaleString(),\n                    score: progress.answered * 10,\n                },\n                ...prev,\n            ].slice(0, 6);\n            return newHistory;\n        });\n        setStarted(false);\n        setTime(0);\n        setIsPlaying(true);\n        setSelectedCell(null);\n        setSelectedClue(null);\n        setSelectedQuestion('');\n        setUserAnswer('');\n        setGrid([]);\n        setClues({ across: [], down: [] });\n        setTempWrongAnswers({});\n    };\n\n    // Fungsi untuk ambil riwayat progres dari backend (pakai GET /api/progres)\n    const fetchProgresHistory = async () => {\n        try {\n            const res = await axios.get('/api/progres/');\n            if (Array.isArray(res.data.data)) {\n                setHistory(\n                    res.data.data.map(item => ({\n                        time: item.waktu,\n                        percentage: item.selesai,\n                        answered: parseInt(item.jawaban.split('/')[0]),\n                        total: parseInt(item.jawaban.split('/')[1]),\n                        date: new Date(item.tanggal).toLocaleString(),\n                        score: item.skor,\n                    }))\n                );\n            }\n        } catch (e: any) {\n            if (e?.response?.status === 401) {\n                alert('Anda belum login. Silakan login untuk melihat progres Anda.');\n            }\n            // Optional: tampilkan error toast/modal\n        }\n    };\n\n    // Fungsi untuk ambil riwayat progres dari backend berdasarkan user id tertentu\n    const fetchProgresHistoryByUserId = async (userId: number | string) => {\n        try {\n            const res = await axios.get(`/api/progres/user/${userId}`);\n            if (Array.isArray(res.data.data)) {\n                setHistory(\n                    res.data.data.map(item => ({\n                        time: item.waktu,\n                        percentage: item.selesai,\n                        answered: parseInt(item.jawaban.split('/')[0]),\n                        total: parseInt(item.jawaban.split('/')[1]),\n                        date: new Date(item.tanggal).toLocaleString(),\n                        score: item.skor,\n                    }))\n                );\n            }\n        } catch (e) {\n            // Optional: tampilkan error toast/modal\n        }\n    };\n\n    const boardMaxWidth = 640 + 420 + 32; // 640px (dropdown max) + 420px (progress max) + gap\n\n    // Hapus state dan ref terkait popup custom soal\n    // const [isQuestionPopupOpen, setIsQuestionPopup] = useState(false);\n    // const questionButtonRef = useRef<HTMLButtonElement>(null);\n\n\n    const handleQuestionSelectPopup = (clue: Clue) => {\n        setSelectedQuestion(`${clue.direction}-${clue.number}`);\n        setSelectedClue(clue);\n        setUserAnswer('');\n        highlightClueCells(clue);\n        setTimeout(() => {\n            if (answerInputRef.current) answerInputRef.current.focus();\n        }, 0);\n    };\n\n    // Helper: get next clue (urut, skip yang sudah dijawab)\n    const getNextClue = (currentClue: Clue | null): Clue | null => {\n        if (!currentClue) return null;\n        const allClues = [...clues.across, ...clues.down];\n        const sorted = allClues.sort((a, b) => a.number - b.number);\n        const idx = sorted.findIndex(c => c.direction === currentClue.direction && c.number === currentClue.number);\n        // Cari berikutnya yang belum dijawab\n        for (let i = idx + 1; i < sorted.length; i++) {\n            if (!sorted[i].isAnswered) return sorted[i];\n        }\n        // Kalau sudah di akhir, cari clue pertama yang belum dijawab\n        for (let i = 0; i < sorted.length; i++) {\n            if (!sorted[i].isAnswered) return sorted[i];\n        }\n        // Kalau semua sudah dijawab, balik ke pertama\n        return sorted[0] || null;\n    };\n\n    const [dayLabel, setDayLabel] = useState<string>('DAY ?');\n\n    // Fetch day label from API\n    useEffect(() => {\n        axios.get('/api/day/')\n            .then(res => {\n                // Cek berbagai kemungkinan struktur respons\n                if (typeof res.data === 'string') {\n                    setDayLabel(res.data);\n                } else if (res.data?.day) {\n                    setDayLabel(res.data.day);\n                } else if (res.data?.data?.change_day) {\n                    setDayLabel(res.data.data.change_day);\n                }\n            })\n            .catch(() => setDayLabel('DAY 1'));\n    }, []);\n\n    // Tambahkan deklarasi berikut sebelum return\n    const [isQuestionDropdownOpen, setIsQuestionDropdownOpen] = useState(false);\n    const questionDropdownRef = useRef<HTMLDivElement>(null);\n\n    // Tutup dropdown jika klik di luar\n    useEffect(() => {\n        if (!isQuestionDropdownOpen) return;\n        const handler = (e: MouseEvent) => {\n            if (\n                questionDropdownRef.current &&\n                !questionDropdownRef.current.contains(e.target as Node)\n            ) {\n                setIsQuestionDropdownOpen(false);\n            }\n        };\n        document.addEventListener('mousedown', handler);\n        return () => document.removeEventListener('mousedown', handler);\n    }, [isQuestionDropdownOpen]);\n\n    return (\n        <DefaultLayout>\n            {/* Tambahkan style global untuk mencegah scroll horizontal */}\n            <style>{`\n                html, body {\n                    overflow-x: hidden !important;\n                    width: 100% !important;\n                    max-width: 100vw !important;\n                    position: relative;\n                }\n                #app, #root {\n                    width: 100% !important;\n                    max-width: 100vw !important;\n                    overflow-x: hidden !important;\n                }\n            `}</style>\n            {/* Fixed background image and overlay */}\n            <div\n                className=\"fixed inset-0 z-0 bg-cover bg-center bg-no-repeat overflow-x-hidden\"\n                style={{\n                    backgroundImage: `url(${bg})`,\n                    width: \"100vw\",\n                    maxWidth: \"100vw\",\n                    left: 0,\n                    right: 0,\n                }}\n            >\n                <div className=\"absolute inset-0 bg-[#BF400099] mix-blend-multiply pointer-events-none\"></div>\n            </div>\n            {/* Content */}\n            <div\n                className=\"relative z-10 my-4 md:my-40 md:mx-auto w-full overflow-x-hidden\"\n                style={{ maxWidth: 1092, marginLeft: \"auto\", marginRight: \"auto\" }}\n            >\n                {/* Header & Progress Row */}\n                <div\n                    className=\"bg-[#b84c19] w-full text-white p-3 md:p-4 md:mt-0 mt-32 rounded-lg mb-4 relative\"\n                    style={{\n                        maxWidth: 1092,\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                    }}\n                >\n                    <div className=\"flex flex-col md:flex-row md:items-center md:justify-between w-full\">\n                        {/* Stats cards - Fixed position on mobile */}\n                        <div className=\"flex flex-col md:flex-row md:items-center md:space-x-8 w-full\">\n                            {/* Stats Row */}\n                            <div\n                                className=\"flex flex-row flex-wrap items-center justify-between w-full md:w-auto md:justify-start md:space-x-8 gap-y-2\"\n                                style={{\n                                    position: 'relative',\n                                    top: 0,\n                                    left: 0\n                                }}\n                            >\n                                <div className=\"flex flex-col items-center justify-center w-24\">\n                                    <div className=\"text-2xl md:text-3xl font-bold leading-tight\">{dayLabel}</div>\n                                </div>\n                                <div className=\"flex flex-col items-center justify-center w-24\">\n                                    <div className=\"text-2xl md:text-3xl font-bold leading-tight\">{progress.answered * 10}</div>\n                                    <div className=\"text-xs md:text-sm\">Skor</div>\n                                </div>\n                                <div className=\"flex flex-col items-center justify-center w-24\">\n                                    <div className=\"text-2xl md:text-3xl font-bold leading-tight\">{formatTime(time)}</div>\n                                    <div className=\"text-xs md:text-sm\">Waktu</div>\n                                </div>\n                                <div className=\"flex flex-col items-center justify-center w-24\">\n                                    <div className=\"text-2xl md:text-3xl font-bold leading-tight\">{progress.answered}/{progress.total}</div>\n                                    <div className=\"text-xs md:text-sm\">Pertanyaan</div>\n                                </div>\n                                <div className=\"flex flex-col items-center justify-center w-24\">\n                                    <div className=\"text-2xl md:text-3xl font-bold leading-tight\">{progress.percentage}%</div>\n                                    <div className=\"text-xs md:text-sm\">Selesai</div>\n                                </div>\n                            </div>\n                            {/* Button Row */}\n                            <div className=\"flex flex-row flex-wrap items-center justify-center md:justify-end gap-2 md:space-x-5 mt-4 md:mt-0 w-full md:w-auto\">\n                                <button\n                                    onClick={started ? checkAllAnswers : undefined}\n                                    className={`bg-white shadow-lg text-orange-600 px-4 py-2 rounded text-xs md:text-sm font-medium transition-all duration-150\n                                        ${started ? 'hover:scale-105 hover:bg-orange-100' : 'opacity-50 cursor-not-allowed'}\n                                    `}\n                                    style={{ minWidth: 110, minHeight: 40 }}\n                                    disabled={!started}\n                                >\n                                    Cek Jawaban\n                                </button>\n                                <button\n                                    onClick={() => setIsPetunjukModalOpen(true)}\n                                    className=\"bg-white shadow-lg text-orange-600 px-4 py-2 rounded text-xs md:text-sm font-medium transition-all duration-150 hover:scale-105 hover:bg-orange-100\"\n                                    style={{ minWidth: 110, minHeight: 40 }}\n                                >\n                                    Petunjuk\n                                </button>\n                                <button\n                                    onClick={() => {\n                                        fetchProgresHistory();\n                                        setIsHistoryModalOpen(true);\n                                    }}\n                                    className=\"bg-white shadow-lg text-orange-600 px-4 py-2 rounded text-xs md:text-sm font-medium transition-all duration-150 hover:scale-105 hover:bg-orange-100\"\n                                    style={{ minWidth: 110, minHeight: 40 }}\n                                >\n                                    Riwayat\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {/* Game Area */}\n                <div className=\"flex flex-col md:flex-row gap-4 w-full max-w-full overflow-x-hidden\">\n                    {/* Game Area */}\n                    <div className=\"flex-1 order-2 md:order-1 mx-auto max-w-5xl md:w-full w-full overflow-x-hidden\">\n                        <div className=\"p-2 md:p-4 rounded-lg mb-4 w-full max-w-full overflow-x-hidden\">\n                            {/* Show both Question Selection and Board together when started */}\n                            {started && (\n                                <div\n                                    className=\"w-full max-w-full overflow-x-hidden\"\n                                    style={{\n                                        maxWidth: 1092,\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\"\n                                    }}\n                                >\n                                    {/* Soal Dropdown - Responsive */}\n                                    <div\n                                        className=\"mb-4 bg-white p-4 rounded-lg shadow w-full\"\n                                        style={{ maxWidth: '100%' }}\n                                    >\n                                        <div className=\"flex flex-col md:flex-row gap-4\">\n                                            <div className=\"flex-1 min-w-[220px] w-full\" style={{ maxWidth: '100%', position: 'relative' }}>\n                                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Pilih Soal</label>\n                                                {/* Custom Dropdown */}\n                                                <div className=\"relative\" ref={questionDropdownRef}>\n                                                    <button\n                                                        type=\"button\"\n                                                        className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-white text-left focus:outline-none focus:ring-2 focus:ring-orange-500 flex justify-between items-center\"\n                                                        onClick={() => setIsQuestionDropdownOpen(v => !v)}\n                                                    >\n                                                        <span>\n                                                            {selectedQuestion\n                                                                ? (() => {\n                                                                    const [direction, numberStr] = selectedQuestion.split('-');\n                                                                    const number = parseInt(numberStr);\n                                                                    const clueList = direction === 'across' ? clues.across : clues.down;\n                                                                    const clue = clueList.find(c => c.number === number);\n                                                                    return clue\n                                                                        ? `${clue.number}. ${clue.clue} (${clue.answer.length} huruf)`\n                                                                        : '-- Pilih Soal --';\n                                                                })()\n                                                                : '-- Pilih Soal --'}\n                                                        </span>\n                                                        <svg className={`w-4 h-4 ml-2 transition-transform ${isQuestionDropdownOpen ? 'rotate-180' : ''}`} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" viewBox=\"0 0 24 24\">\n                                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 9l-7 7-7-7\" />\n                                                        </svg>\n                                                    </button>\n                                                    {isQuestionDropdownOpen && (\n                                                        <div\n                                                            className=\"absolute left-0 mt-2 w-full bg-white border border-gray-200 rounded-md shadow-lg z-30 max-h-72 overflow-y-auto animate-dropdown\"\n                                                            style={{\n                                                                minWidth: 220,\n                                                                boxShadow: '0 8px 24px 0 rgba(191,64,0,0.10)'\n                                                            }}\n                                                        >\n                                                            <div className=\"py-1\">\n                                                                <div className=\"px-3 py-1 text-xs font-semibold text-orange-700 bg-orange-50 rounded-t\">Mendatar</div>\n                                                                {clues.across.length === 0 && (\n                                                                    <div className=\"px-4 py-2 text-gray-400 text-sm\">Tidak ada soal mendatar</div>\n                                                                )}\n                                                                {clues.across.map(clue => (\n                                                                    <button\n                                                                        key={`across-${clue.number}`}\n                                                                        className={`w-full text-left px-4 py-2 text-sm hover:bg-orange-100 transition rounded ${selectedQuestion === `across-${clue.number}` ? 'bg-orange-50 font-semibold text-orange-700' : ''\n                                                                            }`}\n                                                                        onClick={() => {\n                                                                            setSelectedQuestion(`across-${clue.number}`);\n                                                                            setSelectedClue(clue);\n                                                                            setInputDirection('across');\n                                                                            setUserAnswer('');\n                                                                            clearAllWrongAnswers();\n                                                                            highlightClueCells(clue);\n                                                                            setIsQuestionDropdownOpen(false);\n                                                                            setTimeout(() => {\n                                                                                if (answerInputRef.current) answerInputRef.current.focus();\n                                                                            }, 0);\n                                                                        }}\n                                                                    >\n                                                                        {clue.number}. {clue.clue} <span className=\"text-gray-400\">({clue.answer.length} huruf)</span>\n                                                                    </button>\n                                                                ))}\n                                                                <div className=\"px-3 py-1 text-xs font-semibold text-orange-700 bg-orange-50 mt-2 rounded-t\">Menurun</div>\n                                                                {clues.down.length === 0 && (\n                                                                    <div className=\"px-4 py-2 text-gray-400 text-sm\">Tidak ada soal menurun</div>\n                                                                )}\n                                                                {clues.down.map(clue => (\n                                                                    <button\n                                                                        key={`down-${clue.number}`}\n                                                                        className={`w-full text-left px-4 py-2 text-sm hover:bg-orange-100 transition rounded ${selectedQuestion === `down-${clue.number}` ? 'bg-orange-50 font-semibold text-orange-700' : ''\n                                                                            }`}\n                                                                        onClick={() => {\n                                                                            setSelectedQuestion(`down-${clue.number}`);\n                                                                            setSelectedClue(clue);\n                                                                            setInputDirection('down');\n                                                                            setUserAnswer('');\n                                                                            clearAllWrongAnswers();\n                                                                            highlightClueCells(clue);\n                                                                            setIsQuestionDropdownOpen(false);\n                                                                            setTimeout(() => {\n                                                                                if (answerInputRef.current) answerInputRef.current.focus();\n                                                                            }, 0);\n                                                                        }}\n                                                                    >\n                                                                        {clue.number}. {clue.clue} <span className=\"text-gray-400\">({clue.answer.length} huruf)</span>\n                                                                    </button>\n                                                                ))}\n                                                            </div>\n                                                        </div>\n                                                    )}\n                                                    {/* Animasi dropdown */}\n                                                    <style>{`\n                                                        @keyframes dropdown {\n                                                            0% { opacity: 0; transform: translateY(-10px);}\n                                                            100% { opacity: 1; transform: translateY(0);}\n                                                        }\n                                                        .animate-dropdown {\n                                                            animation: dropdown 0.18s cubic-bezier(.4,0,.2,1);\n                                                        }\n                                                    `}</style>\n                                                </div>\n                                            </div>\n                                            {selectedQuestion && selectedClue && (\n                                                <div className=\"flex-1 min-w-[180px] w-full\">\n                                                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                                                        Jawaban ({selectedClue.answer.length} huruf)\n                                                    </label>\n                                                    <div className=\"flex gap-2\">\n                                                        <input\n                                                            ref={answerInputRef}\n                                                            type=\"text\"\n                                                            value={userAnswer}\n                                                            onChange={(e) => setUserAnswer(e.target.value.toUpperCase())}\n                                                            maxLength={selectedClue.answer.length}\n                                                            className=\"flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 uppercase bg-white\"\n                                                            placeholder={`Masukkan ${selectedClue.answer.length} huruf`}\n                                                            onKeyDown={async e => {\n                                                                if (\n                                                                    e.key === 'Enter' &&\n                                                                    userAnswer.length === selectedClue.answer.length\n                                                                ) {\n                                                                    // Submit dan cek hasil\n                                                                    let hasil = 'salah';\n                                                                    try {\n                                                                        const res = await axios.post(`/api/admin/tesla/${selectedClue.number}`, { jawaban: userAnswer });\n                                                                        hasil = res.data.hasil;\n                                                                    } catch {\n                                                                        hasil = 'salah';\n                                                                    }\n                                                                    await handleAnswerSubmit();\n                                                                    if (hasil === 'benar') {\n                                                                        const nextClue = getNextClue(selectedClue);\n                                                                        if (nextClue) {\n                                                                            setSelectedQuestion(`${nextClue.direction}-${nextClue.number}`);\n                                                                            setSelectedClue(nextClue);\n                                                                            setUserAnswer('');\n                                                                            highlightClueCells(nextClue);\n                                                                            setTimeout(() => {\n                                                                                if (answerInputRef.current) answerInputRef.current.focus();\n                                                                            }, 0);\n                                                                        }\n                                                                    } else {\n                                                                        // Pastikan tetap di nomor currentnya\n                                                                        setSelectedQuestion(`${selectedClue.direction}-${selectedClue.number}`);\n                                                                        setSelectedClue(selectedClue);\n                                                                        setTimeout(() => {\n                                                                            if (answerInputRef.current) answerInputRef.current.focus();\n                                                                        }, 0);\n                                                                    }\n                                                                }\n                                                            }}\n                                                        />\n                                                        <button\n                                                            onClick={async () => {\n                                                                // Submit dan cek hasil\n                                                                let hasil = 'salah';\n                                                                try {\n                                                                    const res = await axios.post(`/api/admin/tesla/${selectedClue.number}`, { jawaban: userAnswer });\n                                                                    hasil = res.data.hasil;\n                                                                } catch {\n                                                                    hasil = 'salah';\n                                                                }\n                                                                await handleAnswerSubmit();\n                                                                if (hasil === 'benar') {\n                                                                    const nextClue = getNextClue(selectedClue);\n                                                                    if (nextClue) {\n                                                                        setSelectedQuestion(`${nextClue.direction}-${nextClue.number}`);\n                                                                        setSelectedClue(nextClue);\n                                                                        setUserAnswer('');\n                                                                        highlightClueCells(nextClue);\n                                                                        setTimeout(() => {\n                                                                            if (answerInputRef.current) answerInputRef.current.focus();\n                                                                        }, 0);\n                                                                    }\n                                                                } else {\n                                                                    // Pastikan tetap di nomor currentnya\n                                                                    setSelectedQuestion(`${selectedClue.direction}-${selectedClue.number}`);\n                                                                    setSelectedClue(selectedClue);\n                                                                    setTimeout(() => {\n                                                                        if (answerInputRef.current) answerInputRef.current.focus();\n                                                                    }, 0);\n                                                                }\n                                                            }}\n                                                            className=\"bg-orange-500 text-white px-4 py-2 rounded-md hover:bg-orange-600 transition-all duration-150\"\n                                                        >\n                                                            Submit\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    {/* Board */}\n                                    {!loading && (\n                                        <div\n                                            className=\"bg-white rounded-lg shadow w-full max-w-full overflow-x-auto\"\n                                            style={{\n                                                border: '1px solid #e5e7eb',\n                                                display: 'block',\n                                                minWidth: 0,\n                                                width: '100%',\n                                                padding: 0,\n                                                maxWidth: '100%',\n                                                WebkitOverflowScrolling: 'touch',\n                                                overflowX: 'auto',\n                                            }}\n                                            // HAPUS kode auto-scroll ke tengah:\n                                            // ref={el => {\n                                            //     if (el && grid.length > 0) {\n                                            //         el.scrollLeft = (el.scrollWidth - el.clientWidth) / 2;\n                                            //     }\n                                            // }}\n                                            // Drag-to-scroll handlers\n                                            onMouseDown={e => {\n                                                const el = e.currentTarget;\n                                                let startX = e.pageX - el.offsetLeft;\n                                                let scrollLeft = el.scrollLeft;\n                                                const onMouseMove = (ev: MouseEvent) => {\n                                                    const x = ev.pageX - el.offsetLeft;\n                                                    el.scrollLeft = scrollLeft - (x - startX);\n                                                };\n                                                const onMouseUp = () => {\n                                                    window.removeEventListener('mousemove', onMouseMove);\n                                                    window.removeEventListener('mouseup', onMouseUp);\n                                                };\n                                                window.addEventListener('mousemove', onMouseMove);\n                                                window.addEventListener('mouseup', onMouseUp);\n                                            }}\n                                            onTouchStart={e => {\n                                                const el = e.currentTarget;\n                                                const touch = e.touches[0];\n                                                let startX = touch.pageX - el.offsetLeft;\n                                                let scrollLeft = el.scrollLeft;\n                                                const onTouchMove = (ev: TouchEvent) => {\n                                                    const t = ev.touches[0];\n                                                    const x = t.pageX - el.offsetLeft;\n                                                    el.scrollLeft = scrollLeft - (x - startX);\n                                                };\n                                                const onTouchEnd = () => {\n                                                    window.removeEventListener('touchmove', onTouchMove);\n                                                    window.removeEventListener('touchend', onTouchEnd);\n                                                };\n                                                window.addEventListener('touchmove', onTouchMove);\n                                                window.addEventListener('touchend', onTouchEnd);\n                                            }}\n                                        >\n                                            <div\n                                                className=\"grid gap-0\"\n                                                style={{\n                                                    gridTemplateColumns:\n                                                        grid[0]?.length\n                                                            ? `repeat(${grid[0].length}, 1fr)`\n                                                            : undefined,\n                                                    width: \"100%\",\n                                                    maxWidth: \"100%\",\n                                                }}\n                                            >\n                                                {(grid.length > 0 ? grid : []).map((row, rowIndex) => (\n                                                    <React.Fragment key={rowIndex}>\n                                                        {(row ? row : []).map((cell, colIndex) => (\n                                                            <div\n                                                                key={`${rowIndex}-${colIndex}`}\n                                                                className={`\n                                                                    border border-gray-400\n                                                                    flex items-center justify-center relative\n                                                                    text-xs md:text-base\n                                                                    transition-all\n                                                                    ${cell?.isBlack ? 'bg-black' : ''}\n                                                                    ${cell?.isCorrect ? 'bg-green-200' : cell?.isWrong ? 'bg-red-200' : cell?.isSelected ? 'bg-yellow-200' : cell?.isHighlighted ? 'bg-yellow-100' : 'bg-gray-50'}\n                                                                    ${cell?.letter ? 'font-bold' : ''}\n                                                                    select-none\n                                                                `}\n                                                                style={{\n                                                                    width: \"100%\",\n                                                                    aspectRatio: \"1 / 1\",\n                                                                    minWidth: 32,\n                                                                    minHeight: 32,\n                                                                    maxWidth: \"100%\",\n                                                                    maxHeight: \"100%\",\n                                                                    padding: 0,\n                                                                    boxSizing: 'border-box',\n                                                                    cursor: cell?.number ? 'pointer' : 'default',\n                                                                    borderRadius: 4,\n                                                                    borderWidth: 1,\n                                                                    borderColor: cell?.isCorrect\n                                                                        ? '#22c55e'\n                                                                        : cell?.isWrong\n                                                                            ? '#ef4444'\n                                                                            : '#a3a3a3',\n                                                                    backgroundColor: cell?.isBlack ? '#000' :\n                                                                        cell?.isCorrect ? '#bbf7d0' :\n                                                                            cell?.isWrong ? '#fecaca' :\n                                                                                cell?.isSelected ? '#fef08a' :\n                                                                                    cell?.isHighlighted ? '#fef9c3' :\n                                                                                        '#f9fafb',\n                                                                }}\n                                                            >\n                                                                {cell?.number && (\n                                                                    <span\n                                                                        className=\"absolute top-0 left-0 text-[10px] text-gray-800 pl-0.5 pt-0.5 leading-none cursor-pointer select-none\"\n                                                                        style={{\n                                                                            zIndex: 2,\n                                                                            background: 'rgba(255,255,255,0.7)',\n                                                                            borderRadius: 2,\n                                                                            minWidth: 12,\n                                                                            textAlign: 'left',\n                                                                            pointerEvents: 'auto',\n                                                                        }}\n                                                                        onClick={() => {\n                                                                            if (!started) return;\n                                                                            const clue = getClueByPosition(rowIndex, colIndex);\n                                                                            if (clue) {\n                                                                                setSelectedQuestion(`${clue.direction}-${clue.number}`);\n                                                                                highlightClueCells(clue);\n                                                                            }\n                                                                        }}\n                                                                    >\n                                                                        {cell.number}\n                                                                    </span>\n                                                                )}\n                                                                <span\n                                                                    className={`${cell?.isSelected ? 'text-black font-bold' : 'text-gray-800'}`}\n                                                                    style={{\n                                                                        zIndex: 1,\n                                                                        width: '100%',\n                                                                        textAlign: 'center',\n                                                                        fontSize: '1rem',\n                                                                        lineHeight: '1.5rem',\n                                                                        position: 'relative',\n                                                                    }}\n                                                                >\n                                                                    {cell?.letter || ''}\n                                                                </span>\n                                                            </div>\n                                                        ))}\n                                                    </React.Fragment>\n                                                ))}\n                                            </div>\n                                            {/* Hide scrollbar for Chrome/Safari/Opera */}\n                                            <style>\n                                                {`\n                                                .grid::-webkit-scrollbar {\n                                                    display: none !important;\n                                                    width: 0 !important;\n                                                    height: 0 !important;\n                                                    background: transparent !important;\n                                                }\n                                                /* Hide scrollbar for the board container */\n                                                .bg-white.rounded-lg.shadow::-webkit-scrollbar {\n                                                    display: none !important;\n                                                    width: 0 !important;\n                                                    height: 0 !important;\n                                                    background: transparent !important;\n                                                }\n                                                .bg-white.rounded-lg.shadow {\n                                                    -ms-overflow-style: none;  /* IE and Edge */\n                                                    scrollbar-width: none;     /* Firefox */\n                                                }\n                                                `}\n                                            </style>\n                                        </div>\n                                    )}\n                                    {/* Saat loading, board tidak tampil sama sekali (tanpa padding) */}\n                                </div>\n                            )}\n                        </div>\n                        {/* Bottom Buttons */}\n                        {/* --- Start: Always inline, wrap if needed --- */}\n                        <div className=\"flex flex-row flex-wrap gap-2 justify-center items-center\">\n                            {!started ? (\n                                <button\n                                    onClick={() => {\n                                        if (loading) return;\n                                        setClues({\n                                            across: initialClues.across.map(c => ({ ...c, isAnswered: false })),\n                                            down: initialClues.down.map(c => ({ ...c, isAnswered: false })),\n                                        });\n                                        setGrid(initialGrid.map(row => row.map(cell => ({\n                                            ...cell,\n                                            letter: '',\n                                            isSelected: false,\n                                            isHighlighted: false,\n                                            isCorrect: false,\n                                            isWrong: false,\n                                        }))));\n                                        setStarted(true);\n                                        setTime(0);\n                                        setIsPlaying(true);\n                                        setSelectedCell(null);\n                                        setSelectedClue(null);\n                                        setUserAnswer('');\n                                        // Pilih soal pertama otomatis\n                                        const first = getFirstClue();\n                                        if (first) {\n                                            setSelectedQuestion(first.key);\n                                            setSelectedClue(first.clue);\n                                            setTimeout(() => {\n                                                highlightClueCells(first.clue);\n                                            }, 0);\n                                        } else {\n                                            setSelectedQuestion('');\n                                            setSelectedClue(null);\n                                        }\n                                    }}\n                                    className={`bg-gradient-to-r from-orange-500 to-[#b84c19] text-white font-bold text-lg rounded-xl shadow-lg px-10 py-3 transition-all duration-200 hover:scale-105 hover:from-orange-600 hover:to-[#a03c15] focus:outline-none${loading ? ' opacity-50 cursor-not-allowed' : ''}`}\n                                    style={{\n                                        minWidth: 180,\n                                        minHeight: 56,\n                                        letterSpacing: 1,\n                                        margin: '0 auto',\n                                        display: 'block'\n                                    }}\n                                    disabled={loading}\n                                >\n                                    Mulai\n                                </button>\n                            ) : (\n                                <button\n                                    onClick={() => {\n                                        resetPuzzle();\n                                        // Otomatis pindah ke nomor 1 (soal pertama)\n                                        const first = getFirstClue();\n                                        if (first) {\n                                            setSelectedQuestion(first.key);\n                                            setSelectedClue(first.clue);\n                                            setTimeout(() => {\n                                                highlightClueCells(first.clue);\n                                                if (answerInputRef.current) answerInputRef.current.focus();\n                                            }, 0);\n                                        } else {\n                                            setSelectedQuestion('');\n                                            setSelectedClue(null);\n                                        }\n                                    }}\n                                    className=\"bg-white shadow-lg text-orange-600 px-4 py-2 rounded text-xs md:text-sm font-medium transition-all duration-150 hover:scale-105 hover:bg-orange-100\"\n                                    style={{\n                                        minWidth: 110,\n                                        minHeight: 40,\n                                        transition: 'transform 0.15s',\n                                        fontWeight: 500,\n                                        boxShadow: '0 2px 8px 0 rgba(191,64,0,0.08)'\n                                    }}\n                                >\n                                    Mulai Dari Awal\n                                </button>\n                            )}\n                            {started && (\n                                <>\n                                    <button\n                                        onClick={togglePause}\n                                        className=\"bg-white shadow-lg text-orange-600 px-4 py-2 rounded text-xs md:text-sm font-medium transition-all duration-150 hover:scale-105 hover:bg-orange-100\"\n                                        style={{\n                                            minWidth: 110,\n                                            minHeight: 40,\n                                            transition: 'transform 0.15s',\n                                            fontWeight: 500,\n                                            boxShadow: '0 2px 8px 0 rgba(191,64,0,0.08)'\n                                        }}\n                                    >\n                                        {isPlaying ? 'Pause' : 'Lanjutkan'}\n                                    </button>\n                                    <button\n                                        onClick={handleSaveProgress}\n                                        className=\"bg-white shadow-lg text-orange-600 px-4 py-2 rounded text-xs md:text-sm font-medium transition-all duration-150 hover:scale-105 hover:bg-orange-100\"\n                                        style={{\n                                            minWidth: 110,\n                                            minHeight: 40,\n                                            transition: 'transform 0.15s',\n                                            fontWeight: 500,\n                                            boxShadow: '0 2px 8px 0 rgba(191,64,0,0.08)'\n                                        }}\n                                    >\n                                        Simpan Progres\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                        {/* --- End: Always inline, wrap if needed --- */}\n                    </div>\n                </div>\n                {/* Progress Bar - Desktop Only */}\n            </div>\n\n\n            {/* Progress Modal */}\n            <ProgressModal\n                isOpen={isProgressModalOpen}\n                onClose={() => setIsProgressModalOpen(false)}\n            />\n\n            {/* Result Modal */}\n            <ResultModal\n                isOpen={isResultModalOpen}\n                onClose={() => setIsResultModalOpen(false)}\n                correct={result.correct}\n                wrong={result.wrong}\n            />\n\n            {/* Petunjuk Bermain Modal */}\n            {isPetunjukModalOpen && (\n                <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-start justify-center p-4 pt-[15vh]\">\n                    <div className=\"bg-white w-full max-w-md mx-auto rounded-lg overflow-hidden\">\n                        <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                            <h3 className=\"font-medium\">Petunjuk Bermain</h3>\n                            <button\n                                onClick={() => setIsPetunjukModalOpen(false)}\n                                className=\"text-white text-xl font-bold\"\n                            >\n                                ×\n                            </button>\n                        </div>\n                        <div className=\"p-6\">\n                            <ol className=\"list-decimal pl-5 space-y-2 text-sm text-gray-700\">\n                                <li>Pilih soal dari dropdown atau daftar soal</li>\n                                <li>Masukkan jawaban pada kolom input</li>\n                                <li>Tekan Submit untuk mengisi jawaban</li>\n                                <li>Jawaban benar akan berwarna hijau</li>\n                                <li>Jawaban salah akan berwarna merah</li>\n                                <li>Tekan \"Check Jawaban\" untuk memeriksa semua jawaban</li>\n                                <li>Tekan \"Simpan Progres\" untuk menyimpan progres permainan</li>\n                            </ol>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {/* History Progress Modal */}\n            {isHistoryModalOpen && (\n                <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-start justify-center p-4 pt-[15vh]\">\n                    <div className=\"bg-white w-full max-w-md mx-auto rounded-lg overflow-hidden\">\n                        <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                            <h3 className=\"font-medium\">Riwayat Progres</h3>\n                            <button\n                                onClick={() => setIsHistoryModalOpen(false)}\n                                className=\"text-white text-xl font-bold\"\n                            >\n                                ×\n                            </button>\n                        </div>\n                        <div className=\"p-6\">\n                            {history.length > 0 ? (\n                                <div\n                                    className=\"overflow-y-auto\"\n                                    style={{\n                                        maxHeight: 320,\n                                        overflowX: 'auto'\n                                    }}\n                                >\n                                    <table className=\"min-w-full text-sm text-gray-700 table-auto\" style={{ width: '100%' }}>\n                                        <thead>\n                                            <tr>\n                                                <th className=\"px-2 py-1 text-left whitespace-nowrap\">Tanggal</th>\n                                                <th className=\"px-2 py-1 text-left whitespace-nowrap\">Waktu</th>\n                                                <th className=\"px-2 py-1 text-left whitespace-nowrap\">Selesai</th>\n                                                <th className=\"px-2 py-1 text-left whitespace-nowrap\">Jawaban</th>\n                                                <th className=\"px-2 py-1 text-left whitespace-nowrap\">Skor</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {history.map((h, idx) => (\n                                                <tr key={idx} className=\"border-t\">\n                                                    <td className=\"px-2 py-1 break-words\" data-label=\"Tanggal\">{h.date}</td>\n                                                    <td className=\"px-2 py-1 break-words\" data-label=\"Waktu\">{formatTime(h.time)}</td>\n                                                    <td className=\"px-2 py-1 break-words\" data-label=\"Selesai\">{h.percentage}%</td>\n                                                    <td className=\"px-2 py-1 break-words\" data-label=\"Jawaban\">{h.answered}/{h.total}</td>\n                                                    <td className=\"px-2 py-1 break-words\" data-label=\"Skor\">{typeof h.score === 'number' ? h.score : (h.answered * 10)}</td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </table>\n                                    <style>{`\n            @media (max-width: 640px) {\n                table, thead, tbody, th, td, tr {\n                    display: block;\n                    width: 100%;\n                }\n                thead {\n                    display: none;\n                }\n                tbody tr {\n                    margin-bottom: 12px;\n                    border: none;\n                    background: #fff;\n                    box-shadow: 0 1px 4px rgba(0,0,0,0.04);\n                    border-radius: 8px;\n                    padding: 8px 0;\n                }\n                td {\n                    padding: 8px 12px;\n                    border: none;\n                    position: relative;\n                    min-width: 0;\n                    word-break: break-word;\n                }\n                td[data-label]:before {\n                    content: attr(data-label) \": \";\n                    font-weight: 600;\n                    color: #b84c19;\n                    display: inline;\n                    margin-right: 4px;\n                    font-size: 0.95em;\n                }\n            }\n        `}</style>\n                                </div>\n                            ) : (\n                                <div className=\"text-center text-gray-500\">Belum ada history progress.</div>\n                            )}\n                        </div>                    </div>\n                </div>\n            )}\n        </DefaultLayout>\n    );\n}\n"],"names":["Page","currentTab","setCurrentTab","useState","isMobileMenuOpen","setIsMobileMenuOpen","isProgressModalOpen","setIsProgressModalOpen","isResultModalOpen","setIsResultModalOpen","isPetunjukModalOpen","setIsPetunjukModalOpen","isHistoryModalOpen","setIsHistoryModalOpen","selectedCell","setSelectedCell","selectedClue","setSelectedClue","inputDirection","setInputDirection","clues","setClues","across","down","grid","setGrid","time","setTime","isPlaying","setIsPlaying","selectedQuestion","setSelectedQuestion","userAnswer","setUserAnswer","result","setResult","correct","wrong","loading","setLoading","started","setStarted","tempWrongAnswers","setTempWrongAnswers","history","setHistory","answerInputRef","useRef","initialClues","setInitialClues","initialGrid","setInitialGrid","useEffect","async","arr","axios","get","data","maxRow","maxCol","forEach","c","tipe","Math","max","start_row","start_col","_a","jawaban","length","_b","size","filter","map","number","nomor","clue","pertanyaan","answer","direction","startRow","startCol","isAnswered","newGrid","Array","fill","letter","isBlack","isSelected","isHighlighted","isCorrect","isWrong","fetchInitial","fetchClues","timer","setInterval","prev","clearInterval","row","cell","clearAllWrongAnswers","highlightClueCells","rowArr","col","r","handleAnswerSubmit","toUpperCase","hasil","res","post","needResize","newSize","emptyCell","push","i","key","copy","formatTime","seconds","secs","floor","toString","padStart","progress","totalClues","percentage","answered","total","answeredClues","allCorrect","round","calculateProgress","ProgressModal","isOpen","onClose","className","children","jsxs","jsx","onClick","style","width","ResultModal","getFirstClue","getNextClue","currentClue","sorted","sort","a","b","findIndex","dayLabel","setDayLabel","then","day","_c","change_day","catch","isQuestionDropdownOpen","setIsQuestionDropdownOpen","questionDropdownRef","handler","e","current","contains","target","document","addEventListener","removeEventListener","DefaultLayout","backgroundImage","maxWidth","left","right","marginLeft","marginRight","position","top","correctCount","wrongCount","newClues","clueType","minWidth","minHeight","disabled","isArray","item","waktu","selesai","parseInt","split","date","Date","tanggal","toLocaleString","score","skor","response","status","alert","fetchProgresHistory","ref","type","v","numberStr","find","stroke","strokeWidth","viewBox","strokeLinecap","strokeLinejoin","d","boxShadow","setTimeout","focus","value","onChange","maxLength","placeholder","onKeyDown","nextClue","border","display","padding","WebkitOverflowScrolling","overflowX","onMouseDown","el","currentTarget","startX","pageX","offsetLeft","scrollLeft","onMouseMove","ev","x","onMouseUp","window","onTouchStart","touches","onTouchMove","onTouchEnd","gridTemplateColumns","rowIndex","React","Fragment","colIndex","aspectRatio","maxHeight","boxSizing","cursor","borderRadius","borderWidth","borderColor","backgroundColor","zIndex","background","textAlign","pointerEvents","getClueByPosition","fontSize","lineHeight","first","transition","fontWeight","letterSpacing","margin","toISOString","slice","h","idx"],"mappings":"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"}