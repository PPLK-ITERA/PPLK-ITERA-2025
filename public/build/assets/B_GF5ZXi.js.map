{"version":3,"mappings":";wJAiBA,MAAMA,EAAsC,EAC1CC,SACAC,UACAC,YACAC,SACAC,YAEM,MAAAC,EAAYC,SAAe,MAC3BC,EAAWD,SAAyB,OACnCE,EAAYC,GAAiBC,WAAc,OAC3CC,EAAUC,GAAeF,YAAS,IAClCG,EAASC,GAAcJ,WAA4B,KACnDK,EAAkBC,GAAuBN,gBAC9C,GAGFO,aAAU,KACeC,WACrB,MAAMC,yBAAEA,SAAmCC,GAAAF,UAAA,MAAAC,kCAAAE,OAAO,iBAAgB,OAAAF,2BAAA,GAAAG,4BACpDb,EAAA,IAAIU,EAA0B,OAI7C,IAEHF,aAAU,KACWC,WACjB,MACMK,SADgBC,UAAUC,aAAaC,oBAChBC,QAC1BC,GAA2B,eAAhBA,EAAOC,OAErBf,EAAWS,GACL,MAAAO,EAAgBC,aAAaC,QAAQ,oBAEzCF,GACAP,EAAaU,MAAML,GAAWA,EAAOM,WAAaJ,IAElDd,EAAoBc,GACXP,EAAaY,OAAS,GACXnB,EAAAO,EAAa,GAAGW,SACtC,OAID,IAEHjB,aAAU,KACR,MA4BMmB,EAAWC,aA5BDnB,UACd,GAAIP,GAAYN,EAAUiC,SAAW9B,IAAeJ,EAAO,CACnD,MAAAmC,EAAWlC,EAAUiC,QAAQE,gBACnC,GAAID,EACE,IACI,MAAAE,QAAejC,EAAWkC,qBAC9B,EACAH,GAEEhC,EAAS+B,SACX/B,EAAS+B,QAAQK,OAEZ3C,EAAAyC,EAAOG,WACdhC,GAAY,GACZiC,YAAW,IAAMjC,GAAY,IAAOV,SAC7B4C,GACHA,aAAeC,EACT9C,EAAA,IAAI+C,MAAM,sBACTF,aAAeE,MACxB/C,EAAQ6C,GAEA7C,EAAA,IAAI+C,MAAM,2BAEtB,CAEJ,IAGoC,KAC/B,UAAMC,cAAcb,EAAQ,GAClC,CAAC5B,EAAYR,EAAQC,EAASU,EAAUT,IAQzC,SAAAgD,KAAC,MAAI,CAAAC,UAAU,6CACZC,SAAA,CAAAvC,EAAQsB,OAAS,GAChBkB,EAAAC,IAAC,UACCC,SAAWC,IAAMC,OATGvB,EASgBsB,EAAEE,OAAOC,MARnD3C,EAAoBkB,QACPH,aAAA6B,QAAQ,mBAAoB1B,GAFhB,IAACA,CAS8B,EAClDyB,MAAO5C,EACPoC,UAAU,OAETC,WAAQS,KAAI,CAACjC,EAAQkC,UACnB,SAAmB,CAAAH,MAAO/B,EAAOM,SAC/BkB,WAAOW,OAAS,UAAUD,EAAQ,KADxBA,SAMnBZ,KAAC,MAAI,CAAAC,UAAU,0CACbC,SAAA,CAAAC,EAAAC,IAACU,EAAA,CACCC,OAAO,EACPC,IAAK7D,EACL8D,iBAAiB,aACjBC,iBAAkB,CAChBlC,SAAUnB,EACN,CAAEsD,MAAOtD,QACT,EACJuD,WAAYvD,OAAmB,EAAY,CAAEsD,MAAO,gBAEtDlB,UAAU,mHAEZD,KAAC,MAAI,CAAAC,UAAU,sDACbC,SAAA,GAACF,KAAA,OAAIC,UAAU,6DACbC,SAAA,GAAAE,IAAC,MAAGF,SAAW,kBACfE,IAAC,MAAGF,SAAa,uBAEnBE,IAAC,MAAI,CAAAH,UAAU,mGACfE,EAAAC,IAACiB,EAAA,CACCC,QAASrE,EACTgD,UAAU,8CACXC,SAAA,yBAKJE,MAAA,SAAMY,IAAK3D,EAAUkE,IAAKC,MAC7B","names":["QRScanner","onScan","onError","scanDelay","onBack","pause","webcamRef","useRef","audioRef","codeReader","setCodeReader","useState","scanning","setScanning","devices","setDevices","selectedDeviceId","setSelectedDeviceId","useEffect","async","BrowserMultiFormatReader","__vitePreload","import","__VITE_PRELOAD__","videoDevices","navigator","mediaDevices","enumerateDevices","filter","device","kind","savedDeviceId","localStorage","getItem","some","deviceId","length","interval","setInterval","current","imageSrc","getScreenshot","result","decodeFromImage","play","getText","setTimeout","err","NotFoundException","Error","clearInterval","jsxs","className","children","jsxRuntimeExports","jsx","onChange","e","handleDeviceChange","target","value","setItem","map","index","label","Webcam","audio","ref","screenshotFormat","videoConstraints","exact","facingMode","Button","onClick","src","beep"],"ignoreList":[],"sources":["../../../resources/js/Pages/Dashboard/cui/absensi/QRScanner.tsx"],"sourcesContent":["import NotFoundException from \"@zxing/library/esm/core/NotFoundException\";\nimport Webcam from \"react-webcam\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { Button } from \"@/Components/ui/button\";\n\nimport beep from \"!assets/music/beep.mp3\";\n\ninterface QRScannerProps {\n  onScan: (result: string) => void;\n  onError: (error: Error) => void;\n  onBack: () => void;\n  scanDelay: number;\n  pause: boolean;\n}\n\nconst QRScanner: React.FC<QRScannerProps> = ({\n  onScan,\n  onError,\n  scanDelay,\n  onBack,\n  pause,\n}) => {\n  const webcamRef = useRef<Webcam>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const [codeReader, setCodeReader] = useState<any>(null);\n  const [scanning, setScanning] = useState(true);\n  const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState<string | undefined>(\n    undefined,\n  );\n\n  useEffect(() => {\n    const loadCodeReader = async () => {\n      const { BrowserMultiFormatReader } = await import(\"@zxing/library\");\n      setCodeReader(new BrowserMultiFormatReader());\n    };\n\n    loadCodeReader();\n  }, []);\n\n  useEffect(() => {\n    const getDevices = async () => {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const videoDevices = devices.filter(\n        (device) => device.kind === \"videoinput\",\n      );\n      setDevices(videoDevices);\n      const savedDeviceId = localStorage.getItem(\"selectedDeviceId\");\n      if (\n        savedDeviceId &&\n        videoDevices.some((device) => device.deviceId === savedDeviceId)\n      ) {\n        setSelectedDeviceId(savedDeviceId);\n      } else if (videoDevices.length > 0) {\n        setSelectedDeviceId(videoDevices[0].deviceId);\n      }\n    };\n\n    getDevices();\n  }, []);\n\n  useEffect(() => {\n    const capture = async () => {\n      if (scanning && webcamRef.current && codeReader && !pause) {\n        const imageSrc = webcamRef.current.getScreenshot();\n        if (imageSrc) {\n          try {\n            const result = await codeReader.decodeFromImage(\n              undefined,\n              imageSrc,\n            );\n            if (audioRef.current) {\n              audioRef.current.play();\n            }\n            onScan(result.getText());\n            setScanning(false);\n            setTimeout(() => setScanning(true), scanDelay);\n          } catch (err) {\n            if (err instanceof NotFoundException) {\n              onError(new Error(\"No QR code found.\"));\n            } else if (err instanceof Error) {\n              onError(err);\n            } else {\n              onError(new Error(\"Unknown error occurred.\"));\n            }\n          }\n        }\n      }\n    };\n\n    const interval = setInterval(capture, 500);\n    return () => clearInterval(interval);\n  }, [codeReader, onScan, onError, scanning, scanDelay]);\n\n  const handleDeviceChange = (deviceId: string) => {\n    setSelectedDeviceId(deviceId);\n    localStorage.setItem(\"selectedDeviceId\", deviceId);\n  };\n\n  return (\n    <div className=\"relative flex flex-col items-center h-full\">\n      {devices.length > 1 && (\n        <select\n          onChange={(e) => handleDeviceChange(e.target.value)}\n          value={selectedDeviceId}\n          className=\"mb-4\"\n        >\n          {devices.map((device, index) => (\n            <option key={index} value={device.deviceId}>\n              {device.label || `Camera ${index + 1}`}\n            </option>\n          ))}\n        </select>\n      )}\n      <div className=\"md:w-full relative w-screen h-full px-2\">\n        <Webcam\n          audio={false}\n          ref={webcamRef}\n          screenshotFormat=\"image/jpeg\"\n          videoConstraints={{\n            deviceId: selectedDeviceId\n              ? { exact: selectedDeviceId }\n              : undefined,\n            facingMode: selectedDeviceId ? undefined : { exact: \"environment\" },\n          }}\n          className=\"w-screen brightness-50 h-[calc(100vh-120px)] md:h-auto border-2 border-black object-cover  md:object-contain\"\n        />\n        <div className=\"absolute top-0 left-0 w-full h-full overflow-hidden\">\n          <div className=\"flex flex-col items-center gap-1 mt-2 font-bold text-white\">\n            <h1>ABSEN C.U.I</h1>\n            <h2>ini deskripsi</h2>\n          </div>\n          <div className=\"bg-gradient-to-t from-white/50 to-transparent animate-scan absolute top-0 left-0 w-full h-full\"></div>\n          <Button\n            onClick={onBack}\n            className=\"bottom-5 left-1/2 absolute -translate-x-1/2\"\n          >\n            Absensi Manual\n          </Button>\n        </div>\n      </div>\n      <audio ref={audioRef} src={beep} />\n    </div>\n  );\n};\n\nexport default QRScanner;\n"],"file":"assets/B_GF5ZXi.js"}