{"version":3,"file":"BLWH_8Q8.js","sources":["../../../resources/js/Pages/Tesla/Page.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DefaultLayout from \"@/Layouts/DefaultLayout\";\nimport bg_1 from \"!assets/tesla/bg-1.png\";\nimport axios from 'axios';\n\ntype Cell = {\n    letter: string;\n    isBlack: boolean;\n    number?: number;\n    isSelected: boolean;\n    isHighlighted: boolean;\n    isCorrect: boolean;\n    isWrong: boolean;\n};\n\ntype Clue = {\n    number: number;\n    clue: string;\n    answer: string;\n    direction: 'across' | 'down';\n    startRow: number;\n    startCol: number;\n    isAnswered: boolean;\n};\n\nexport default function Page() {\n    const [currentTab, setCurrentTab] = useState<'Petunjuk Soal' | 'Mendatar' | 'Menurun'>('Petunjuk Soal');\n    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n    const [isProgressModalOpen, setIsProgressModalOpen] = useState(false);\n    const [isResultModalOpen, setIsResultModalOpen] = useState(false);\n    const [selectedCell, setSelectedCell] = useState<{ row: number, col: number } | null>(null);\n    const [selectedClue, setSelectedClue] = useState<Clue | null>(null);\n    const [inputDirection, setInputDirection] = useState<'across' | 'down'>('across');\n    const [clues, setClues] = useState<{\n        across: Clue[];\n        down: Clue[];\n    }>({ across: [], down: [] });\n    const [grid, setGrid] = useState<Cell[][]>([]);\n    const [time, setTime] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(true);\n    const [selectedQuestion, setSelectedQuestion] = useState<string>('');\n    const [userAnswer, setUserAnswer] = useState<string>('');\n    const [result, setResult] = useState({ correct: 0, wrong: 0 });\n    const [loading, setLoading] = useState(true);\n    const [started, setStarted] = useState(false);\n    const [tempWrongAnswers, setTempWrongAnswers] = useState<{ [key: string]: string }>({});\n    const answerInputRef = useRef<HTMLInputElement>(null);\n\n    const bg = bg_1;\n\n    // Fetch clues from API and initialize grid\n    useEffect(() => {\n        if (started) {\n            fetchClues();\n            setIsPlaying(true);\n            setTime(0);\n        }\n        // eslint-disable-next-line\n    }, [started]);\n\n    useEffect(() => {\n        if (!started) return;\n        const timer = setInterval(() => {\n            if (isPlaying) setTime(prev => prev + 1);\n        }, 1000);\n        return () => clearInterval(timer);\n    }, [isPlaying, started]);\n\n    // Hapus initializeCrossword, gunakan hanya fetchClues\n    const fetchClues = async () => {\n        setLoading(true);\n        try {\n            const res = await axios.get('/api/admin/tesla/');\n            const arr = res.data.data;\n            setClues({\n                across: arr.filter((c: any) => c.tipe === 'mendatar').map((c: any) => ({\n                    number: c.nomor,\n                    clue: c.pertanyaan,\n                    answer: c.jawaban,\n                    direction: 'across',\n                    startRow: c.start_row,\n                    startCol: c.start_col,\n                    isAnswered: false,\n                })),\n                down: arr.filter((c: any) => c.tipe === 'menurun').map((c: any) => ({\n                    number: c.nomor,\n                    clue: c.pertanyaan,\n                    answer: c.jawaban,\n                    direction: 'down',\n                    startRow: c.start_row,\n                    startCol: c.start_col,\n                    isAnswered: false,\n                })),\n            });\n            // Build grid\n            const size = 15;\n            const newGrid: Cell[][] = Array(size).fill(null).map(() =>\n                Array(size).fill(null).map(() => ({\n                    letter: '',\n                    isBlack: false,\n                    isSelected: false,\n                    isHighlighted: false,\n                    isCorrect: false,\n                    isWrong: false,\n                }))\n            );\n            arr.forEach((c: any) => {\n                if (\n                    c.start_row >= 0 && c.start_row < size &&\n                    c.start_col >= 0 && c.start_col < size\n                ) {\n                    newGrid[c.start_row][c.start_col].number = c.nomor;\n                }\n            });\n            setGrid(newGrid);\n        } catch (e) {\n            setClues({ across: [], down: [] });\n            setGrid([]);\n        }\n        setLoading(false);\n    };\n\n    const initializeCrossword = () => {\n        const size = 15;\n        const newGrid: Cell[][] = Array(size).fill(null).map(() =>\n            Array(size).fill(null).map(() => ({\n                letter: '',\n                isBlack: false,\n                isSelected: false,\n                isHighlighted: false,\n                isCorrect: false,\n                isWrong: false,\n            }))\n        );\n\n        // Define clues and answers\n        const acrossClues: Clue[] = [\n            {\n                number: 1,\n                clue: \"Ibu kota Indonesia\",\n                answer: \"JAKARTA\",\n                direction: 'across',\n                startRow: 1,\n                startCol: 1,\n                isAnswered: false\n            },\n            {\n                number: 4,\n                clue: \"Planet terdekat dari matahari\",\n                answer: \"MERKURIUS\",\n                direction: 'across',\n                startRow: 3,\n                startCol: 2,\n                isAnswered: false\n            },\n            {\n                number: 6,\n                clue: \"Binatang yang dikenal sebagai raja hutan\",\n                answer: \"SINGA\",\n                direction: 'across',\n                startRow: 5,\n                startCol: 4,\n                isAnswered: false\n            },\n            {\n                number: 7,\n                clue: \"Warna daun\",\n                answer: \"HIJAU\",\n                direction: 'across',\n                startRow: 7,\n                startCol: 6,\n                isAnswered: false\n            },\n            {\n                number: 9,\n                clue: \"Negara dengan menara Eiffel\",\n                answer: \"PERANCIS\",\n                direction: 'across',\n                startRow: 9,\n                startCol: 8,\n                isAnswered: false\n            }\n        ];\n\n        const downClues: Clue[] = [\n            {\n                number: 2,\n                clue: \"Buah dengan kulit berduri\",\n                answer: \"DURIAN\",\n                direction: 'down',\n                startRow: 1,\n                startCol: 3,\n                isAnswered: false\n            },\n            {\n                number: 3,\n                clue: \"Sungai terpanjang di dunia\",\n                answer: \"NIL\",\n                direction: 'down',\n                startRow: 2,\n                startCol: 5,\n                isAnswered: false\n            },\n            {\n                number: 5,\n                clue: \"Lambang kimia untuk emas\",\n                answer: \"AU\",\n                direction: 'down',\n                startRow: 4,\n                startCol: 7,\n                isAnswered: false\n            },\n            {\n                number: 8,\n                clue: \"Ibu kota Jepang\",\n                answer: \"TOKYO\",\n                direction: 'down',\n                startRow: 6,\n                startCol: 9,\n                isAnswered: false\n            },\n            {\n                number: 10,\n                clue: \"Satelit alami bumi\",\n                answer: \"BULAN\",\n                direction: 'down',\n                startRow: 8,\n                startCol: 11,\n                isAnswered: false\n            }\n        ];\n\n        // Assign numbers to cells and update grid\n        const allClues = [...acrossClues, ...downClues];\n        allClues.forEach(clue => {\n            if (!newGrid[clue.startRow][clue.startCol].isBlack) {\n                newGrid[clue.startRow][clue.startCol].number = clue.number;\n            }\n        });\n\n        setGrid(newGrid);\n        setClues({\n            across: acrossClues,\n            down: downClues\n        });\n    };\n\n    const handleQuestionSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const value = e.target.value;\n        setSelectedQuestion(value);\n        setUserAnswer('');\n\n        // Hapus jawaban salah sementara dari grid jika ada\n        if (selectedClue && selectedQuestion) {\n            clearTempWrongAnswer(selectedClue, selectedQuestion);\n        }\n\n        if (value) {\n            const [direction, numberStr] = value.split('-');\n            const number = parseInt(numberStr);\n\n            const clueList = direction === 'across' ? clues.across : clues.down;\n            const clue = clueList.find(c => c.number === number);\n\n            if (clue) {\n                setInputDirection(direction as 'across' | 'down');\n                highlightClueCells(clue);\n                setTimeout(() => {\n                    if (answerInputRef.current) {\n                        answerInputRef.current.focus();\n                    }\n                }, 0);\n            }\n        }\n    };\n\n    // Fungsi untuk menghapus jawaban salah sementara dari grid\n    const clearTempWrongAnswer = (clue: Clue, questionKey: string) => {\n        if (!tempWrongAnswers[questionKey]) return;\n        const answer = tempWrongAnswers[questionKey];\n        const newGrid = [...grid.map(row => [...row])];\n        if (clue.direction === 'across') {\n            for (let i = 0; i < clue.answer.length; i++) {\n                const col = clue.startCol + i;\n                if (col >= newGrid[clue.startRow].length) continue;\n                // Hanya hapus jika cell bukan jawaban benar\n                if (!newGrid[clue.startRow][col].isCorrect) {\n                    newGrid[clue.startRow][col].letter = '';\n                    newGrid[clue.startRow][col].isWrong = false;\n                }\n            }\n        } else {\n            for (let i = 0; i < clue.answer.length; i++) {\n                const row = clue.startRow + i;\n                if (row >= newGrid.length) continue;\n                if (!newGrid[row][clue.startCol].isCorrect) {\n                    newGrid[row][clue.startCol].letter = '';\n                    newGrid[row][clue.startCol].isWrong = false;\n                }\n            }\n        }\n        setGrid(newGrid);\n        setTempWrongAnswers(prev => {\n            const copy = { ...prev };\n            delete copy[questionKey];\n            return copy;\n        });\n    };\n\n    const highlightClueCells = (clue: Clue) => {\n        const newGrid = grid.map(rowArr =>\n            rowArr.map(cell => ({\n                ...cell,\n                isHighlighted: false,\n                isSelected: false,\n                isCorrect: false,\n                isWrong: false\n            }))\n        );\n\n        if (clue.direction === 'across') {\n            for (let c = clue.startCol; c < clue.startCol + clue.answer.length; c++) {\n                if (c < newGrid[clue.startRow].length) {\n                    newGrid[clue.startRow][c].isHighlighted = true;\n                }\n            }\n            newGrid[clue.startRow][clue.startCol].isSelected = true;\n            setSelectedCell({ row: clue.startRow, col: clue.startCol });\n        } else {\n            for (let r = clue.startRow; r < clue.startRow + clue.answer.length; r++) {\n                if (r < newGrid.length) {\n                    newGrid[r][clue.startCol].isHighlighted = true;\n                }\n            }\n            newGrid[clue.startRow][clue.startCol].isSelected = true;\n            setSelectedCell({ row: clue.startRow, col: clue.startCol });\n        }\n\n        setSelectedClue(clue);\n        setGrid(newGrid);\n    };\n\n    // Submit answer to API\n    // Ubah handleAnswerSubmit agar jika jawaban benar dan grid tidak cukup, grid otomatis diperbesar\n    const handleAnswerSubmit = async () => {\n        if (!selectedQuestion || !userAnswer || !selectedClue) return;\n        const answer = userAnswer.toUpperCase();\n        // Validate answer length\n        if (answer.length !== selectedClue.answer.length) {\n            // ...bisa pakai toast/modal, tidak pakai alert\n            return;\n        }\n\n        // Cek ke backend\n        let hasil = 'salah';\n        try {\n            const res = await axios.post(`/api/admin/tesla/${selectedClue.number}`, { jawaban: userAnswer });\n            hasil = res.data.hasil;\n        } catch {\n            hasil = 'salah';\n        }\n\n        // Cek apakah grid cukup, jika tidak, resize grid\n        let newGrid = [...grid.map(row => [...row])];\n        let size = newGrid.length;\n        let needResize = false;\n        if (selectedClue.direction === 'across') {\n            const lastCol = selectedClue.startCol + selectedClue.answer.length - 1;\n            if (lastCol >= size) {\n                needResize = true;\n            }\n        } else {\n            const lastRow = selectedClue.startRow + selectedClue.answer.length - 1;\n            if (lastRow >= size) {\n                needResize = true;\n            }\n        }\n        if (hasil === 'benar' && needResize) {\n            // Resize grid (tambah baris/kolom agar jawaban muat)\n            const newSize = Math.max(\n                selectedClue.direction === 'across'\n                    ? selectedClue.startCol + selectedClue.answer.length\n                    : size,\n                selectedClue.direction === 'down'\n                    ? selectedClue.startRow + selectedClue.answer.length\n                    : size,\n                size + 1 // minimal tambah 1\n            );\n            const emptyCell = () => ({\n                letter: '',\n                isBlack: false,\n                isSelected: false,\n                isHighlighted: false,\n                isCorrect: false,\n                isWrong: false,\n            });\n            // Tambah baris jika perlu\n            while (newGrid.length < newSize) {\n                newGrid.push(Array(newSize).fill(null).map(emptyCell));\n            }\n            // Tambah kolom di setiap baris jika perlu\n            for (let i = 0; i < newGrid.length; i++) {\n                while (newGrid[i].length < newSize) {\n                    newGrid[i].push(emptyCell());\n                }\n            }\n            size = newSize;\n        }\n\n        // Reset previous correct/wrong states for this clue\n        if (selectedClue.direction === 'across') {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const col = selectedClue.startCol + i;\n                if (col >= newGrid[selectedClue.startRow].length) continue;\n                newGrid[selectedClue.startRow][col].isCorrect = false;\n                newGrid[selectedClue.startRow][col].isWrong = false;\n                // Jika jawaban salah, hapus huruf sebelumnya (agar tidak menumpuk)\n                if (hasil === 'salah') {\n                    newGrid[selectedClue.startRow][col].letter = '';\n                }\n            }\n        } else {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const row = selectedClue.startRow + i;\n                if (row >= newGrid.length) continue;\n                newGrid[row][selectedClue.startCol].isCorrect = false;\n                newGrid[row][selectedClue.startCol].isWrong = false;\n                if (hasil === 'salah') {\n                    newGrid[row][selectedClue.startCol].letter = '';\n                }\n            }\n        }\n\n        // Update grid visual\n        if (selectedClue.direction === 'across') {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const col = selectedClue.startCol + i;\n                if (col >= newGrid[selectedClue.startRow].length) continue;\n                if (hasil === 'benar') {\n                    newGrid[selectedClue.startRow][col].letter = answer[i] || '';\n                    newGrid[selectedClue.startRow][col].isCorrect = true;\n                    newGrid[selectedClue.startRow][col].isWrong = false;\n                } else {\n                    newGrid[selectedClue.startRow][col].letter = answer[i] || '';\n                    newGrid[selectedClue.startRow][col].isCorrect = false;\n                    newGrid[selectedClue.startRow][col].isWrong = true;\n                }\n            }\n        } else {\n            for (let i = 0; i < selectedClue.answer.length; i++) {\n                const row = selectedClue.startRow + i;\n                if (row >= newGrid.length) continue;\n                if (hasil === 'benar') {\n                    newGrid[row][selectedClue.startCol].letter = answer[i] || '';\n                    newGrid[row][selectedClue.startCol].isCorrect = true;\n                    newGrid[row][selectedClue.startCol].isWrong = false;\n                } else {\n                    newGrid[row][selectedClue.startCol].letter = answer[i] || '';\n                    newGrid[row][selectedClue.startCol].isCorrect = false;\n                    newGrid[row][selectedClue.startCol].isWrong = true;\n                }\n            }\n        }\n\n        // Update clue status\n        setClues(prev => {\n            if (selectedClue.direction === 'across') {\n                return {\n                    ...prev,\n                    across: prev.across.map(c =>\n                        c.number === selectedClue.number ? { ...c, isAnswered: hasil === 'benar' } : c\n                    )\n                };\n            } else {\n                return {\n                    ...prev,\n                    down: prev.down.map(c =>\n                        c.number === selectedClue.number ? { ...c, isAnswered: hasil === 'benar' } : c\n                    )\n                };\n            }\n        });\n\n        setGrid(newGrid);\n\n        // Jika salah, simpan jawaban sementara, jika benar hapus\n        setTempWrongAnswers(prev => {\n            const key = selectedQuestion;\n            if (hasil === 'salah') {\n                return { ...prev, [key]: answer };\n            } else {\n                const copy = { ...prev };\n                delete copy[key];\n                return copy;\n            }\n        });\n\n        setUserAnswer('');\n        setSelectedQuestion('');\n        setSelectedClue(null);\n    };\n\n    const checkAllAnswers = () => {\n        const newGrid = [...grid];\n        let correctCount = 0;\n        let wrongCount = 0;\n\n        // Check all clues\n        const newClues = { ...clues };\n\n        for (const clueType of ['across', 'down'] as const) {\n            newClues[clueType] = newClues[clueType].map(clue => {\n                let isCorrect = true;\n                const answer = clue.answer;\n\n                // Reset previous states\n                for (let i = 0; i < answer.length; i++) {\n                    const row = clue.direction === 'across' ? clue.startRow : clue.startRow + i;\n                    const col = clue.direction === 'across' ? clue.startCol + i : clue.startCol;\n\n                    if (row >= newGrid.length || col >= newGrid[0].length) continue;\n                    newGrid[row][col].isCorrect = false;\n                    newGrid[row][col].isWrong = false;\n                }\n\n                // Check new answer\n                for (let i = 0; i < answer.length; i++) {\n                    const row = clue.direction === 'across' ? clue.startRow : clue.startRow + i;\n                    const col = clue.direction === 'across' ? clue.startCol + i : clue.startCol;\n\n                    if (row >= newGrid.length || col >= newGrid[0].length) continue;\n\n                    if (newGrid[row][col].letter !== answer[i]) {\n                        newGrid[row][col].isWrong = true;\n                        isCorrect = false;\n                    } else {\n                        newGrid[row][col].isCorrect = true;\n                    }\n                }\n\n                if (isCorrect) {\n                    correctCount++;\n                } else {\n                    wrongCount++;\n                }\n\n                return { ...clue, isAnswered: isCorrect };\n            });\n        }\n\n        setGrid(newGrid);\n        setClues(newClues);\n        setResult({ correct: correctCount, wrong: wrongCount });\n        setIsResultModalOpen(true);\n    };\n\n    const resetPuzzle = () => {\n        fetchClues();\n        setSelectedCell(null);\n        setSelectedClue(null);\n        setSelectedQuestion('');\n        setUserAnswer('');\n        setTime(0);\n        setIsPlaying(true);\n        setStarted(true);\n    };\n\n    const togglePause = () => {\n        setIsPlaying(prev => !prev);\n    };\n\n    const formatTime = (seconds: number) => {\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    // Calculate progress, always return 0% if not started or total is 0\n    const calculateProgress = () => {\n        const totalClues = clues.across.length + clues.down.length;\n        if (!started || totalClues === 0) {\n            return {\n                percentage: 0,\n                answered: 0,\n                total: totalClues\n            };\n        }\n        const answeredClues = [...clues.across, ...clues.down].filter(clue => {\n            // Check if all letters in the answer are correct\n            const answer = clue.answer;\n            let allCorrect = true;\n            for (let i = 0; i < answer.length; i++) {\n                const row = clue.direction === 'across' ? clue.startRow : clue.startRow + i;\n                const col = clue.direction === 'across' ? clue.startCol + i : clue.startCol;\n                if (row >= grid.length || col >= grid[0].length) continue;\n                if (grid[row][col].letter !== answer[i]) {\n                    allCorrect = false;\n                    break;\n                }\n            }\n            return allCorrect;\n        }).length;\n        return {\n            percentage: Math.round((answeredClues / totalClues) * 100),\n            answered: answeredClues,\n            total: totalClues\n        };\n    };\n\n    const progress = calculateProgress();\n\n    // Mobile Modal Component for Petunjuk\n    const MobileModal = ({ isOpen, onClose, children, title }: {\n        isOpen: boolean;\n        onClose: () => void;\n        children: React.ReactNode;\n        title: string;\n    }) => {\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end md:hidden\">\n                <div className=\"bg-white w-full max-h-[80vh] rounded-t-lg overflow-hidden\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                        <h3 className=\"font-medium \">{title}</h3>\n                        <button\n                            onClick={onClose}\n                            className=\"text-white text-xl font-bold\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                    <div className=\"max-h-[70vh] overflow-y-auto\">{children}</div>\n                </div>\n            </div>\n        );\n    };\n\n    // Progress Modal Component\n    const ProgressModal = ({ isOpen, onClose }: {\n        isOpen: boolean;\n        onClose: () => void;\n    }) => {\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 md:hidden\">\n                <div className=\"bg-white w-full max-w-sm rounded-lg overflow-hidden\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                        <h3 className=\"font-medium\">Progress</h3>\n                        <button\n                            onClick={onClose}\n                            className=\"text-white text-xl font-bold\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                    <div className=\"p-4\">\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-4\">\n                            <div\n                                className=\"bg-orange-500 h-2 rounded-full\"\n                                style={{ width: `${progress.percentage}%` }}\n                            ></div>\n                        </div>\n                        <div className=\"flex justify-between text-sm text-gray-600\">\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{formatTime(time)}</div>\n                                <div>Waktu</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{progress.percentage}%</div>\n                                <div>Selesai</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{progress.answered}/{progress.total}</div>\n                                <div>Pertanyaan</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    // Result Modal Component\n    const ResultModal = ({ isOpen, onClose, correct, wrong }: {\n        isOpen: boolean;\n        onClose: () => void;\n        correct: number;\n        wrong: number;\n    }) => {\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n                <div className=\"bg-white w-full max-w-sm rounded-lg overflow-hidden\">\n                    <div className=\"flex items-center justify-between p-4 bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white\">\n                        <h3 className=\"font-medium\">Hasil Pemeriksaan</h3>\n                        <button\n                            onClick={onClose}\n                            className=\"text-white text-xl font-bold\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                    <div className=\"p-6\">\n                        <div className=\"flex justify-between mb-4\">\n                            <div className=\"text-center\">\n                                <div className=\"text-3xl font-bold text-green-600\">{correct}</div>\n                                <div className=\"text-sm text-gray-600\">Benar</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-3xl font-bold text-red-600\">{wrong}</div>\n                                <div className=\"text-sm text-gray-600\">Salah</div>\n                            </div>\n                        </div>\n                        <div className=\"text-center mt-4\">\n                            <div className=\"text-lg font-medium text-gray-800\">\n                                {correct === progress.total ?\n                                    \"Selamat! Anda telah menyelesaikan semua soal dengan benar!\" :\n                                    correct > wrong ?\n                                        \"Bagus! Tingkatkan lagi jawaban yang salah!\" :\n                                        \"Coba periksa kembali jawaban Anda!\"}\n                            </div>\n                        </div>\n                        <button\n                            onClick={onClose}\n                            className=\"mt-6 w-full bg-orange-500 text-white py-2 rounded-md hover:bg-orange-600\"\n                        >\n                            Tutup\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    // Helper: get clue by position\n    const getClueByPosition = (row: number, col: number): Clue | null => {\n        // Cari clue yang startRow/startCol sama\n        let clue = clues.across.find(c => c.startRow === row && c.startCol === col);\n        if (clue) return clue;\n        clue = clues.down.find(c => c.startRow === row && c.startCol === col);\n        return clue || null;\n    };\n\n    return (\n        <DefaultLayout>\n            {/* Fixed background image and overlay */}\n            <div\n                className=\"fixed inset-0 z-0 bg-cover bg-center bg-no-repeat\"\n                style={{\n                    backgroundImage: `url(${bg})`,\n                }}\n            >\n                <div className=\"absolute inset-0 bg-[#BF4000] mix-blend-multiply pointer-events-none\"></div>\n            </div>\n            {/* Content */}\n            <div className=\"relative z-10 my-4 md:my-40 md:max-w-5xl md:mx-auto\">\n                {/* Header */}\n                <div className=\"bg-[#b84c19] w-full md:max-w-lg text-white p-3 md:p-4 md:mt-0 mt-32 rounded-lg mb-4\">\n                    <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4 md:space-x-8\">\n                            <div className=\"text-center\">\n                                <div className=\"text-xl md:text-3xl font-bold\">{progress.answered * 10}</div>\n                                <div className=\"text-xs md:text-sm\">Skor</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-xl md:text-3xl font-bold\">{formatTime(time)}</div>\n                                <div className=\"text-xs md:text-sm\">Waktu</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"text-xl md:text-3xl font-bold\">DAY</div>\n                                <div className=\"text-xs md:text-sm\">1</div>\n                            </div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1 md:space-y-2\">\n                            <button\n                                onClick={started ? checkAllAnswers : undefined}\n                                className={`bg-white shadow-lg text-orange-600 px-2 md:px-4 py-1 rounded text-xs md:text-sm font-medium ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                disabled={!started}\n                            >\n                                Cek Jawaban\n                            </button>\n                            <button\n                                onClick={started ? () => setIsMobileMenuOpen(true) : undefined}\n                                className={`bg-white shadow-lg text-orange-600 px-2 md:px-4 py-1 rounded text-xs md:text-sm font-medium md:hidden ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                disabled={!started}\n                            >\n                                Petunjuk\n                            </button>\n                            <button\n                                onClick={started ? () => setCurrentTab('Petunjuk Soal') : undefined}\n                                className={`bg-white shadow-lg text-orange-600 px-2 md:px-4 py-1 rounded text-xs md:text-sm font-medium hidden md:block ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                disabled={!started}\n                            >\n                                Petunjuk\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex flex-col md:flex-row gap-4\">\n                    {/* Game Area */}\n                    <div className=\"flex-1 order-2 md:order-1 mx-auto max-w-5xl md:w-full\">\n                        <div className=\"p-2 md:p-4 rounded-lg mb-4\">\n                            {/* Show both Question Selection and Board together when started */}\n                            {started && (\n                                <div>\n                                    {/* Soal Dropdown */}\n                                    <div\n                                        className=\"hidden md:block mb-4 bg-white p-4 rounded-lg shadow\"\n                                        style={{ maxWidth: '100%', width: '100%' }}\n                                    >\n                                        <div className=\"flex flex-col md:flex-row gap-4\">\n                                            <div\n                                                className=\"flex-1 min-w-[320px] w-full\"\n                                                style={{ maxWidth: '640px' }}\n                                            >\n                                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Pilih Soal</label>\n                                                <select\n                                                    value={selectedQuestion}\n                                                    onChange={handleQuestionSelect}\n                                                    className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 appearance-none bg-white\"\n                                                    style={{\n                                                        paddingRight: '2.5rem',\n                                                        backgroundPosition: 'right 0.75rem center',\n                                                        backgroundRepeat: 'no-repeat',\n                                                        backgroundSize: '1.25em 1.25em',\n                                                        zIndex: 10,\n                                                    }}\n                                                >\n                                                    <option value=\"\">-- Pilih Soal --</option>\n                                                    <optgroup label=\"Mendatar\">\n                                                        {clues.across.map(clue => (\n                                                            <option key={`across-${clue.number}`} value={`across-${clue.number}`}>\n                                                                {clue.number}. {clue.clue} ({clue.answer.length} huruf)\n                                                            </option>\n                                                        ))}\n                                                    </optgroup>\n                                                    <optgroup label=\"Menurun\">\n                                                        {clues.down.map(clue => (\n                                                            <option key={`down-${clue.number}`} value={`down-${clue.number}`}>\n                                                                {clue.number}. {clue.clue} ({clue.answer.length} huruf)\n                                                            </option>\n                                                        ))}\n                                                    </optgroup>\n                                                </select>\n                                            </div>\n                                            {selectedQuestion && selectedClue && (\n                                                <div className=\"flex-1 min-w-[220px] w-full\">\n                                                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                                                        Jawaban ({selectedClue.answer.length} huruf)\n                                                    </label>\n                                                    <div className=\"flex gap-2\">\n                                                        <input\n                                                            ref={answerInputRef}\n                                                            type=\"text\"\n                                                            value={userAnswer}\n                                                            onChange={(e) => setUserAnswer(e.target.value.toUpperCase())}\n                                                            maxLength={selectedClue.answer.length}\n                                                            className=\"flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 uppercase bg-white\"\n                                                            placeholder={`Masukkan ${selectedClue.answer.length} huruf`}\n                                                        />\n                                                        <button\n                                                            onClick={handleAnswerSubmit}\n                                                            className=\"bg-orange-500 text-white px-4 py-2 rounded-md hover:bg-orange-600\"\n                                                        >\n                                                            Submit\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    {/* Board */}\n                                    <div\n                                        className=\"inline-block overflow-x-auto bg-white p-4 rounded-lg shadow\"\n                                        style={{\n                                            maxWidth: '100%',\n                                            minWidth: 320,\n                                            border: '1px solid #e5e7eb',\n                                        }}\n                                    >\n                                        <div\n                                            className=\"grid gap-0\"\n                                            style={{\n                                                gridTemplateColumns: `repeat(${grid.length}, minmax(1.5rem, 2rem))`,\n                                            }}\n                                        >\n                                            {grid.map((row, rowIndex) => (\n                                                <React.Fragment key={rowIndex}>\n                                                    {row.map((cell, colIndex) => (\n                                                        <div\n                                                            key={`${rowIndex}-${colIndex}`}\n                                                            className={`\n                                                                border border-gray-400\n                                                                w-6 h-6 md:w-8 md:h-8\n                                                                flex items-center justify-center relative\n                                                                text-xs md:text-base\n                                                                transition-all\n                                                                ${cell.isBlack ? 'bg-black' : ''}\n                                                                ${cell.isCorrect ? 'bg-green-200' : cell.isWrong ? 'bg-red-200' : cell.isSelected ? 'bg-yellow-200' : cell.isHighlighted ? 'bg-yellow-100' : 'bg-gray-50'}\n                                                                ${cell.letter ? 'font-bold' : ''}\n                                                                select-none\n                                                            `}\n                                                            style={{\n                                                                minWidth: 24,\n                                                                minHeight: 24,\n                                                                maxWidth: 32,\n                                                                maxHeight: 32,\n                                                                padding: 0,\n                                                                boxSizing: 'border-box',\n                                                                cursor: cell.number ? 'pointer' : 'default',\n                                                                borderRadius: 4,\n                                                                borderWidth: 1,\n                                                                borderColor: cell.isCorrect\n                                                                    ? '#22c55e'\n                                                                    : cell.isWrong\n                                                                        ? '#ef4444'\n                                                                        : '#a3a3a3',\n                                                            }}\n                                                        >\n                                                            {cell.number && (\n                                                                <span\n                                                                    className=\"absolute top-0 left-0 text-[10px] text-gray-800 pl-0.5 pt-0.5 leading-none cursor-pointer select-none\"\n                                                                    style={{\n                                                                        zIndex: 2,\n                                                                        background: 'rgba(255,255,255,0.7)',\n                                                                        borderRadius: 2,\n                                                                        minWidth: 12,\n                                                                        textAlign: 'left',\n                                                                        pointerEvents: 'auto',\n                                                                    }}\n                                                                    onClick={() => {\n                                                                        if (!started) return;\n                                                                        const clue = getClueByPosition(rowIndex, colIndex);\n                                                                        if (clue) {\n                                                                            setSelectedQuestion(`${clue.direction}-${clue.number}`);\n                                                                            highlightClueCells(clue);\n                                                                        }\n                                                                    }}\n                                                                >\n                                                                    {cell.number}\n                                                                </span>\n                                                            )}\n                                                            <span\n                                                                className={`${cell.isSelected ? 'text-black font-bold' : 'text-gray-800'}`}\n                                                                style={{\n                                                                    zIndex: 1,\n                                                                    width: '100%',\n                                                                    textAlign: 'center',\n                                                                    fontSize: '1rem',\n                                                                    lineHeight: '1.5rem',\n                                                                    position: 'relative',\n                                                                }}\n                                                            >\n                                                                {cell.letter}\n                                                            </span>\n                                                        </div>\n                                                    ))}\n                                                </React.Fragment>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n\n                        {/* Bottom Buttons */}\n                        <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4\">\n                            {!started ? (\n                                <button\n                                    onClick={() => setStarted(true)}\n                                    className=\"bg-white border border-gray-300 px-4 md:px-6 py-2 rounded text-[#FF6B20] hover:bg-gray-50 text-sm md:text-base\"\n                                >\n                                    Mulai\n                                </button>\n                            ) : (\n                                <button\n                                    onClick={resetPuzzle}\n                                    className=\"bg-white border border-gray-300 px-4 md:px-6 py-2 rounded text-[#FF6B20] hover:bg-gray-50 text-sm md:text-base\"\n                                >\n                                    Mulai Dari Awal\n                                </button>\n                            )}\n                            {started && (\n                                <>\n                                    <button\n                                        onClick={togglePause}\n                                        className=\"bg-white border border-gray-300 px-4 md:px-6 py-2 rounded text-[#FF6B20] hover:bg-gray-50 text-sm md:text-base\"\n                                    >\n                                        {isPlaying ? 'Pause' : 'Lanjutkan'}\n                                    </button>\n                                    <button className=\"bg-white border border-gray-300 px-4 md:px-6 py-2 rounded text-[#FF6B20] hover:bg-gray-50 text-sm md:text-base\">\n                                        Simpan Progress\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n\n                    {/* Right Sidebar - Hidden on mobile, shown in modal */}\n                    <div className=\"hidden md:block w-80 order-1 md:order-2\">\n                        <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n                            {/* Tabs */}\n                            <div className=\"flex\">\n                                <button\n                                    onClick={() => setCurrentTab('Petunjuk Soal')}\n                                    className={`flex-1 py-3 px-4 text-sm font-medium ${currentTab === 'Petunjuk Soal'\n                                        ? 'bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white'\n                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                        }`}\n                                >\n                                    Petunjuk Soal\n                                </button>\n                            </div>\n\n                            {/* Sub tabs */}\n                            <div className=\"flex border-b\">\n                                <button\n                                    onClick={started ? () => setCurrentTab('Mendatar') : undefined}\n                                    className={`flex-1 py-2 px-4 text-sm ${currentTab === 'Mendatar'\n                                        ? 'bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white'\n                                        : 'bg-gray-50 text-gray-600 hover:bg-gray-100'\n                                        } ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                    disabled={!started}\n                                >\n                                    Mendatar\n                                </button>\n                                <button\n                                    onClick={started ? () => setCurrentTab('Menurun') : undefined}\n                                    className={`flex-1 py-2 px-4 text-sm ${currentTab === 'Menurun'\n                                        ? 'bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white'\n                                        : 'bg-gray-50 text-gray-600 hover:bg-gray-100'\n                                        } ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                    disabled={!started}\n                                >\n                                    Menurun\n                                </button>\n                            </div>\n\n                            {/* Content */}\n                            <div className=\"p-4 max-h-80 overflow-y-auto\">\n                                {currentTab === 'Mendatar' && (\n                                    <div>\n                                        <h3 className=\"font-bold mb-2\">Mendatar</h3>\n                                        <ul className=\"space-y-3\">\n                                            {clues.across.map((clue) => (\n                                                <li\n                                                    key={clue.number}\n                                                    className={`p-2 rounded cursor-pointer ${selectedClue?.number === clue.number && selectedClue?.direction === 'across' ? 'bg-yellow-100' : ''}`}\n                                                    onClick={() => {\n                                                        setSelectedQuestion(`across-${clue.number}`);\n                                                        highlightClueCells(clue);\n                                                    }}\n                                                >\n                                                    <span className=\"font-bold\">{clue.number}.</span> {clue.clue}\n                                                    {clue.isAnswered && (\n                                                        <span className=\"ml-2 text-green-600\">✓</span>\n                                                    )}\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </div>\n                                )}\n                                {currentTab === 'Menurun' && (\n                                    <div>\n                                        <h3 className=\"font-bold mb-2\">Menurun</h3>\n                                        <ul className=\"space-y-3\">\n                                            {clues.down.map((clue) => (\n                                                <li\n                                                    key={clue.number}\n                                                    className={`p-2 rounded cursor-pointer ${selectedClue?.number === clue.number && selectedClue?.direction === 'down' ? 'bg-yellow-100' : ''}`}\n                                                    onClick={() => {\n                                                        setSelectedQuestion(`down-${clue.number}`);\n                                                        highlightClueCells(clue);\n                                                    }}\n                                                >\n                                                    <span className=\"font-bold\">{clue.number}.</span> {clue.clue}\n                                                    {clue.isAnswered && (\n                                                        <span className=\"ml-2 text-green-600\">✓</span>\n                                                    )}\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </div>\n                                )}\n                                {currentTab === 'Petunjuk Soal' && (\n                                    <div>\n                                        <h3 className=\"font-bold mb-2\">Petunjuk Bermain</h3>\n                                        <ol className=\"list-decimal pl-5 space-y-2 text-sm\">\n                                            <li>Pilih soal dari dropdown atau daftar soal</li>\n                                            <li>Masukkan jawaban pada kolom input</li>\n                                            <li>Tekan Submit untuk mengisi jawaban</li>\n                                            <li>Jawaban benar akan berwarna hijau</li>\n                                            <li>Jawaban salah akan berwarna merah</li>\n                                            <li>Tekan \"Check Jawaban\" untuk memeriksa semua jawaban</li>\n                                        </ol>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Mobile Quick Actions */}\n                    <div className=\"flex md:hidden space-x-2 order-1 md:order-2 mb-4\">\n                        <button\n                            onClick={() => setIsMobileMenuOpen(true)}\n                            className=\"flex-1 bg-white border border-gray-300 px-3 py-2 rounded text-[#FF6B20] hover:bg-gray-50 text-sm\"\n                        >\n                            📝 Petunjuk\n                        </button>\n                        <button\n                            onClick={() => setIsProgressModalOpen(true)}\n                            className=\"flex-1 bg-white border border-gray-300 px-3 py-2 rounded text-[#FF6B20] hover:bg-gray-50 text-sm\"\n                        >\n                            📊 Progress\n                        </button>\n                    </div>\n                </div>\n\n                {/* Progress Bar - Desktop Only */}\n                {started && (\n                    <div className=\"hidden md:block mt-6 bg-white border border-gray-200 rounded-lg p-4\">\n                        <h3 className=\"text-lg font-medium text-gray-800 mb-4 text-center\">Progress</h3>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-4\">\n                            <div\n                                className=\"bg-orange-500 h-2 rounded-full\"\n                                style={{ width: `${progress.percentage}%` }}\n                            ></div>\n                        </div>\n                        <div className=\"flex justify-between text-sm text-gray-600\">\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{formatTime(time)}</div>\n                                <div>Waktu</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{progress.percentage}%</div>\n                                <div>Selesai</div>\n                            </div>\n                            <div className=\"text-center\">\n                                <div className=\"font-bold text-gray-800\">{progress.answered}/{progress.total}</div>\n                                <div>Pertanyaan</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {/* Mobile Modal for Petunjuk */}\n            <MobileModal\n                isOpen={isMobileMenuOpen}\n                onClose={() => setIsMobileMenuOpen(false)}\n                title=\"Petunjuk Soal\"\n            >\n                {/* Sub tabs */}\n                <div className=\"flex border-b\">\n                    <button\n                        onClick={started ? () => setCurrentTab('Mendatar') : undefined}\n                        className={`flex-1 py-3 px-4 text-sm ${currentTab === 'Mendatar'\n                            ? 'bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white'\n                            : 'bg-gray-50 text-gray-600'\n                            } ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        disabled={!started}\n                    >\n                        Mendatar\n                    </button>\n                    <button\n                        onClick={started ? () => setCurrentTab('Menurun') : undefined}\n                        className={`flex-1 py-3 px-4 text-sm ${currentTab === 'Menurun'\n                            ? 'bg-gradient-to-b from-[#BF4000] to-[#591E00] text-white'\n                            : 'bg-gray-50 text-gray-600'\n                            } ${!started ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        disabled={!started}\n                    >\n                        Menurun\n                    </button>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 max-h-60 overflow-y-auto\">\n                    {currentTab === 'Mendatar' && (\n                        <div>\n                            <h3 className=\"font-bold mb-2\">Mendatar</h3>\n                            <ul className=\"space-y-3\">\n                                {clues.across.map((clue) => (\n                                    <li\n                                        key={clue.number}\n                                        className={`p-2 rounded cursor-pointer ${selectedClue?.number === clue.number && selectedClue?.direction === 'across' ? 'bg-yellow-100' : ''}`}\n                                        onClick={() => {\n                                            setSelectedQuestion(`across-${clue.number}`);\n                                            highlightClueCells(clue);\n                                            setIsMobileMenuOpen(false);\n                                        }}\n                                    >\n                                        <span className=\"font-bold\">{clue.number}.</span> {clue.clue}\n                                        {clue.isAnswered && (\n                                            <span className=\"ml-2 text-green-600\">✓</span>\n                                        )}\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                    {currentTab === 'Menurun' && (\n                        <div>\n                            <h3 className=\"font-bold mb-2\">Menurun</h3>\n                            <ul className=\"space-y-3\">\n                                {clues.down.map((clue) => (\n                                    <li\n                                        key={clue.number}\n                                        className={`p-2 rounded cursor-pointer ${selectedClue?.number === clue.number && selectedClue?.direction === 'down' ? 'bg-yellow-100' : ''}`}\n                                        onClick={() => {\n                                            setSelectedQuestion(`down-${clue.number}`);\n                                            highlightClueCells(clue);\n                                            setIsMobileMenuOpen(false);\n                                        }}\n                                    >\n                                        <span className=\"font-bold\">{clue.number}.</span> {clue.clue}\n                                        {clue.isAnswered && (\n                                            <span className=\"ml-2 text-green-600\">✓</span>\n                                        )}\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                    {currentTab === 'Petunjuk Soal' && (\n                        <div>\n                            <h3 className=\"font-bold mb-2\">Petunjuk Bermain</h3>\n                            <ol className=\"list-decimal pl-5 space-y-2 text-sm\">\n                                <li>Pilih soal dari dropdown atau daftar soal</li>\n                                <li>Masukkan jawaban pada kolom input</li>\n                                <li>Tekan Submit untuk mengisi jawaban</li>\n                                <li>Jawaban benar akan berwarna hijau</li>\n                                <li>Jawaban salah akan berwarna merah</li>\n                                <li>Tekan \"Check Jawaban\" untuk memeriksa semua jawaban</li>\n                            </ol>\n                        </div>\n                    )}\n                </div>\n            </MobileModal>\n\n            {/* Progress Modal */}\n            <ProgressModal\n                isOpen={isProgressModalOpen}\n                onClose={() => setIsProgressModalOpen(false)}\n            />\n\n            {/* Result Modal */}\n            <ResultModal\n                isOpen={isResultModalOpen}\n                onClose={() => setIsResultModalOpen(false)}\n                correct={result.correct}\n                wrong={result.wrong}\n            />\n        </DefaultLayout>\n    );\n}\n"],"names":["Page","currentTab","setCurrentTab","useState","isMobileMenuOpen","setIsMobileMenuOpen","isProgressModalOpen","setIsProgressModalOpen","isResultModalOpen","setIsResultModalOpen","selectedCell","setSelectedCell","selectedClue","setSelectedClue","inputDirection","setInputDirection","clues","setClues","across","down","grid","setGrid","time","setTime","isPlaying","setIsPlaying","selectedQuestion","setSelectedQuestion","userAnswer","setUserAnswer","result","setResult","correct","wrong","loading","setLoading","started","setStarted","tempWrongAnswers","setTempWrongAnswers","answerInputRef","useRef","bg","bg_1","useEffect","timer","setInterval","prev","clearInterval","fetchClues","async","arr","axios","get","data","filter","c","tipe","map","number","nomor","clue","pertanyaan","answer","jawaban","direction","startRow","start_row","startCol","start_col","isAnswered","size","newGrid","Array","fill","letter","isBlack","isSelected","isHighlighted","isCorrect","isWrong","forEach","e","clearTempWrongAnswer","questionKey","row","i","length","col","copy","highlightClueCells","rowArr","cell","r","formatTime","seconds","secs","Math","floor","toString","padStart","progress","totalClues","percentage","answered","total","answeredClues","allCorrect","round","calculateProgress","MobileModal","isOpen","onClose","children","title","className","jsxs","jsx","jsxRuntimeExports","onClick","ProgressModal","style","width","ResultModal","DefaultLayout","backgroundImage","correctCount","wrongCount","newClues","clueType","disabled","maxWidth","value","onChange","target","numberStr","split","parseInt","find","setTimeout","current","focus","paddingRight","backgroundPosition","backgroundRepeat","backgroundSize","zIndex","label","ref","type","toUpperCase","maxLength","placeholder","hasil","res","post","needResize","newSize","max","emptyCell","push","key","minWidth","border","gridTemplateColumns","rowIndex","React","Fragment","colIndex","minHeight","maxHeight","padding","boxSizing","cursor","borderRadius","borderWidth","borderColor","background","textAlign","pointerEvents","getClueByPosition","fontSize","lineHeight","position"],"mappings":"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"}