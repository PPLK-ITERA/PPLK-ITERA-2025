{"version":3,"file":"DYploszB.js","sources":["../../../resources/js/Pages/Dashboard/absensi-maba/absensi/Page.tsx"],"sourcesContent":["import QRScanner from \"./QRScanner\";\nimport { IDetectedBarcode, Scanner, outline } from \"@yudiel/react-qr-scanner\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { Link, router, useForm, usePage } from \"@inertiajs/react\";\n\nimport DashboardLayout from \"@/Layouts/DashboardLayout\";\n\nimport { Button, buttonVariants } from \"@/Components/ui/button\";\nimport { Toaster } from \"@/Components/ui/toaster\";\nimport { useToast } from \"@/Components/ui/use-toast\";\n\nfunction Page({ auth }) {\n    const { toast } = useToast();\n\n    const [csrfToken, setCsrfToken] = useState(\"\");\n    const [result, setResult] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n    const [loading, setLoading] = useState(false);\n    const { data, setData, post, processing } = useForm({\n        qr_code: \"\",\n    });\n\n    const handleScan = async (data: string) => {\n        if (data) {\n            try {\n                const response = await fetch(route(\"dashboard.presensi.scan\"), {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"X-CSRF-TOKEN\": csrfToken,\n                    },\n                    body: JSON.stringify({\n                        qr_code: data,\n                    }),\n                });\n\n                const getResult = await response.json();\n                // console.log(getResult.response);\n\n                if (getResult.response.status === 200) {\n                    toast({\n                        title: \"Presensi Berhasil\",\n                        variant: \"default\",\n                        description: getResult.response.message,\n                    });\n                } else {\n                    toast({\n                        title: \"Presensi Gagal\",\n                        variant: \"destructive\",\n                        description: getResult.response.message,\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error:\", error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        // Fungsi untuk mendapatkan token CSRF dari API\n        const fetchCsrfToken = async () => {\n            try {\n                const response = await fetch(route(\"csrf\"));\n                const data = await response.json();\n                setCsrfToken(data.csrfToken);\n            } catch (error) {\n                console.error(\"Error fetching CSRF token:\", error);\n            }\n        };\n\n        fetchCsrfToken();\n    }, []);\n\n    useEffect(() => {\n        if (data.qr_code) {\n            handleScan(data.qr_code);\n        }\n    }, [data.qr_code]);\n\n    return (\n        <>\n            <DashboardLayout user={auth.user}>\n                <div className=\"relative flex flex-col items-center justify-center w-full h-full\">\n                    <div className=\"md:w-[100%] w-[75vw] h-[70vh] items-center justify-center\">\n                        <h2 className=\"text-xl font-bold tracking-tight text-center\">\n                            Absensi QR SCAN Maba\n                        </h2>\n\n                        {loading ? (\n                            <div className=\"border-b-purple-900 flex items-center justify-center w-full h-full\">\n                                LOADING\n                            </div>\n                        ) : (\n                            <div className=\"flex items-center justify-center w-full\">\n                                <div className=\"md:w-64\">\n                                    <Scanner\n                                        onScan={function (\n                                            detectedCodes: IDetectedBarcode[],\n                                        ): void {\n                                            // console.log(detectedCodes.at(-1)?.rawValue);\n                                            handleScan(\n                                                detectedCodes.at(-1)\n                                                    ?.rawValue || \"\",\n                                            );\n                                            // console.log(detectedCodes);\n                                        }}\n                                        components={{\n                                            finder: true,\n                                            tracker: outline,\n                                            zoom: true,\n                                        }}\n                                        allowMultiple={true}\n                                        scanDelay={2000}\n                                        paused={loading}\n                                        styles={{\n                                            container: {\n                                                width: \"100%\",\n                                            },\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <Link\n                        href={\"/dashboard/absensi-maba\"}\n                        className={buttonVariants()}\n                    >\n                        Absen Manual\n                    </Link>\n                    {result && (\n                        <p className=\"md:block hidden\">\n                            Scanned Result: {result}\n                        </p>\n                    )}\n                </div>\n            </DashboardLayout>\n            <Toaster />\n        </>\n    );\n}\n\nexport default Page;\n"],"names":["Page","auth","toast","useToast","csrfToken","setCsrfToken","useState","result","setResult","loading","setLoading","data","setData","post","processing","useForm","qr_code","handleScan","async","response","fetch","route","method","headers","body","JSON","stringify","getResult","json","status","title","variant","description","message","error","console","useEffect","jsxRuntimeExports","jsxs","Fragment","children","jsx","DashboardLayout","user","className","Scanner","onScan","detectedCodes","_a","at","rawValue","components","finder","tracker","outline","zoom","allowMultiple","scanDelay","paused","styles","container","width","Link","href","buttonVariants","Toaster"],"mappings":"sgBAaA,SAASA,GAAKC,KAAEA,IACN,MAAAC,MAAEA,GAAUC,KAEXC,EAAWC,GAAgBC,WAAS,KACpCC,EAAQC,GAAaF,WAAiB,IACnBA,EAAAA,SAAiB,IAC3C,MAAOG,EAASC,GAAcJ,YAAS,IACjCK,KAAEA,EAAMC,QAAAA,EAAAC,KAASA,EAAMC,WAAAA,GAAeC,EAAQ,CAChDC,QAAS,KAGPC,EAAaC,MAAOP,IACtB,GAAIA,EACI,IACA,MAAMQ,QAAiBC,MAAMC,MAAM,2BAA4B,CAC3DC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,eAAgBnB,GAEpBoB,KAAMC,KAAKC,UAAU,CACjBV,QAASL,MAIXgB,QAAkBR,EAASS,OAGC,MAA9BD,EAAUR,SAASU,OACb3B,EAAA,CACF4B,MAAO,oBACPC,QAAS,UACTC,YAAaL,EAAUR,SAASc,UAG9B/B,EAAA,CACF4B,MAAO,iBACPC,QAAS,cACTC,YAAaL,EAAUR,SAASc,gBAGnCC,GACGC,QAAAD,MAAM,SAAUA,EAC5B,CACJ,EAwBJ,OArBAE,EAAAA,WAAU,KAEiBlB,WACf,IACA,MAAMC,QAAiBC,MAAMC,MAAM,SAC7BV,QAAaQ,EAASS,OAC5BvB,EAAaM,EAAKP,iBACb8B,GACGC,QAAAD,MAAM,6BAA8BA,EAChD,QAIL,IAEHE,EAAAA,WAAU,KACFzB,EAAKK,SACLC,EAAWN,EAAKK,QACpB,GACD,CAACL,EAAKK,UAIDqB,EAAAC,KAAAC,WAAA,CAAAC,SAAA,CAAAC,EAAAA,IAACC,GAAgBC,KAAM1C,EAAK0C,KACxBH,SAACF,EAAAA,KAAA,MAAA,CAAIM,UAAU,mEACXJ,SAAA,GAACF,KAAA,MAAA,CAAIM,UAAU,4DACXJ,SAAA,CAACC,EAAAA,IAAA,KAAA,CAAGG,UAAU,+CAA+CJ,SAE7D,yBAEC/B,EACGgC,EAAAA,IAAC,MAAI,CAAAG,UAAU,qEAAqEJ,SAEpF,YAECC,EAAAA,IAAA,MAAA,CAAIG,UAAU,0CACXJ,SAACC,EAAAA,IAAA,MAAA,CAAIG,UAAU,UACXJ,SAAAH,EAAAI,IAACI,EAAA,CACGC,OAAQ,SACJC,SAGA9B,GACI,OAAA+B,EAAcD,EAAAE,IAAK,aACbC,WAAY,GAG1B,EACAC,WAAY,CACRC,QAAQ,EACRC,QAASC,EACTC,MAAM,GAEVC,eAAe,EACfC,UAAW,IACXC,OAAQjD,EACRkD,OAAQ,CACJC,UAAW,CACPC,MAAO,kBAQnCxB,EAAAI,IAACqB,EAAA,CACGC,KAAM,0BACNnB,UAAWoB,IACdxB,SAAA,iBAGAjC,GACG8B,EAAAC,KAAC,IAAE,CAAAM,UAAU,kBAAkBJ,SAAA,CAAA,mBACVjC,gBAKhC0D,EAAQ,MAGrB"}