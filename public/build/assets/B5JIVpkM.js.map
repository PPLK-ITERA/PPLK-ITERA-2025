{"version":3,"file":"B5JIVpkM.js","sources":["../../../resources/js/Components/ui/data-table.tsx"],"sourcesContent":["import { Button, buttonVariants } from \"./button\";\nimport { Heading } from \"./heading\";\nimport { Input } from \"./input\";\nimport { ScrollArea, ScrollBar } from \"./scroll-area\";\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n} from \"@/Components/ui/pagination\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/Components/ui/table\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  searchKey: string;\n  apiEndpoint: string;\n  title: string;\n  description: string;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  searchKey,\n  apiEndpoint,\n  title,\n  description,\n}: DataTableProps<TData, TValue>) {\n  const [data, setData] = useState<TData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  const [totalRows, setTotalRows] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  // PERBAIKAN: Pastikan numberOfPages selalu valid\n  const numberOfPages = Math.max(1, Math.ceil(totalRows / perPage)) || 1;\n  const visiblePages = 2;\n\n  const fetchTableData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `${apiEndpoint}?page=${page}&perPage=${perPage}&search=${search}`,\n      );\n      const json = await response.json();\n\n      // PERBAIKAN: Debug log untuk melihat response\n      console.log('API Response:', json);\n\n      // PERBAIKAN: Pastikan data dan total adalah valid\n      const responseData = Array.isArray(json.data) ? json.data : [];\n      const responseTotal = typeof json.total === 'number' && !isNaN(json.total) ? json.total : responseData.length;\n\n      setData(responseData);\n      setTotalRows(responseTotal);\n\n      console.log('Set data:', responseData, 'Set total:', responseTotal);\n\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // PERBAIKAN: Set default values pada error\n      setData([]);\n      setTotalRows(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTableData();\n  }, [apiEndpoint, page, perPage, search]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    state: {\n      pagination: {\n        pageIndex: page - 1,\n        pageSize: perPage,\n      },\n    },\n  });\n\n  const handleSubmit = (e: React.ChangeEvent<HTMLInputElement>) => {\n    debounced(e.target.value);\n  };\n\n  const debounced = useDebouncedCallback(\n    // function\n    (value: string) => {\n      setSearch(value);\n      setPage(1);\n    },\n    // delay in ms\n    500,\n  );\n\n  const getPaginationRange = () => {\n    const startPage = Math.max(1, page - Math.floor(visiblePages / 2));\n    const endPage = Math.min(numberOfPages, startPage + visiblePages - 1);\n    const range: number[] = [];\n\n    for (let i = startPage; i <= endPage; i++) {\n      range.push(i);\n    }\n    return range;\n  };\n\n  // PERBAIKAN: Hitung nilai pagination dengan safe values\n  const safeCalculatePaginationDisplay = () => {\n    const safeTotalRows = typeof totalRows === 'number' && !isNaN(totalRows) ? totalRows : 0;\n    const safePerPage = typeof perPage === 'number' && !isNaN(perPage) && perPage > 0 ? perPage : 10;\n    const safePage = typeof page === 'number' && !isNaN(page) && page > 0 ? page : 1;\n\n    if (safeTotalRows === 0) {\n      return {\n        from: 0,\n        to: 0,\n        total: 0,\n        displayText: \"No entries found\"\n      };\n    }\n\n    const from = (safePage - 1) * safePerPage + 1;\n    const to = Math.min(safePage * safePerPage, safeTotalRows);\n\n    return {\n      from,\n      to,\n      total: safeTotalRows,\n      displayText: `Showing ${from} to ${to} of ${safeTotalRows} entries`\n    };\n  };\n\n  const paginationDisplay = safeCalculatePaginationDisplay();\n\n  return (\n    <>\n      <div className=\"md:flex font-inter justify-between\">\n        <Heading title={`${title}`} description={description} />\n\n        <Input\n          placeholder={`Search ${searchKey}...`}\n          onChange={handleSubmit}\n          className=\"md:max-w-sm w-full my-2\"\n        />\n      </div>\n\n      <ScrollArea className=\"max-w-7xl h-[calc(80vh-220px)] rounded-md border\">\n        <Table className=\"md:w-full relative\">\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext(),\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : table.getRowModel().rows.length > 0 ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      <div className=\"line-clamp-2\">\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext(),\n                        )}\n                      </div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-sm text-gray-700\">\n          {/* PERBAIKAN: Gunakan safe calculation untuk display text */}\n          {paginationDisplay.displayText}\n        </div>\n      </div>\n\n      {/* PERBAIKAN: Hanya tampilkan pagination jika ada data */}\n      {totalRows > 0 && (\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <Button\n                disabled={page === 1}\n                onClick={() => setPage(Math.max(page - 1, 1))}\n              >\n                <ChevronLeft />\n              </Button>\n            </PaginationItem>\n\n            {page > 1 + visiblePages / 2 && (\n              <>\n                <PaginationItem className=\"cursor-pointer\">\n                  <PaginationLink onClick={() => setPage(1)}>1</PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                  <PaginationEllipsis />\n                </PaginationItem>\n              </>\n            )}\n\n            {getPaginationRange().map((pageNum) => (\n              <PaginationItem key={pageNum}>\n                <PaginationLink\n                  isActive={page === pageNum}\n                  onClick={() => setPage(pageNum)}\n                  className={\n                    page === pageNum\n                      ? `${buttonVariants()} cursor-default hover:text-white`\n                      : \"cursor-pointer\"\n                  }\n                >\n                  {pageNum}\n                </PaginationLink>\n              </PaginationItem>\n            ))}\n\n            {page < numberOfPages - visiblePages / 2 && numberOfPages > 1 && (\n              <>\n                <PaginationItem>\n                  <PaginationEllipsis />\n                </PaginationItem>\n\n                <PaginationItem className=\"cursor-pointer\">\n                  <PaginationLink onClick={() => setPage(numberOfPages)}>\n                    {numberOfPages}\n                  </PaginationLink>\n                </PaginationItem>\n              </>\n            )}\n            <PaginationItem>\n              <Button\n                disabled={page === numberOfPages || numberOfPages <= 1}\n                onClick={() => setPage(Math.min(page + 1, numberOfPages))}\n              >\n                <ChevronRight />\n              </Button>\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      )}\n    </>\n  );\n}\n"],"names":["DataTable","columns","searchKey","apiEndpoint","title","description","data","setData","useState","loading","setLoading","page","setPage","perPage","setPerPage","totalRows","setTotalRows","search","setSearch","numberOfPages","Math","max","ceil","useEffect","async","response","fetch","json","console","log","responseData","Array","isArray","responseTotal","total","isNaN","length","error","fetchTableData","table","useReactTable","getCoreRowModel","state","pagination","pageIndex","pageSize","debounced","useDebouncedCallback","value","paginationDisplay","safeTotalRows","safePerPage","safePage","from","to","displayText","min","safeCalculatePaginationDisplay","jsxs","Fragment","children","className","jsx","Heading","Input","placeholder","onChange","e","target","ScrollArea","Table","TableHeader","getHeaderGroups","map","headerGroup","TableRow","headers","header","TableHead","isPlaceholder","flexRender","column","columnDef","getContext","id","TableBody","TableCell","colSpan","getRowModel","rows","row","getVisibleCells","cell","ScrollBar","orientation","Pagination","PaginationContent","PaginationItem","Button","disabled","onClick","ChevronLeft","PaginationLink","PaginationEllipsis","startPage","floor","visiblePages","endPage","range","i","push","getPaginationRange","pageNum","isActive","buttonVariants","ChevronRight"],"mappings":"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"}