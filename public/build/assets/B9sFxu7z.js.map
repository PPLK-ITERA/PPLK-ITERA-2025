{"version":3,"file":"B9sFxu7z.js","sources":["../../../node_modules/@tanstack/table-core/build/lib/index.mjs","../../../node_modules/@tanstack/react-table/build/lib/index.mjs","../../../resources/js/Components/ui/data-table.tsx"],"sourcesContent":["/**\n   * table-core\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return depArgs => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps(depArgs);\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null || opts.onChange == null || opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction getMemoOptions(tableOptions, debugLevel, key, onChange) {\n  return {\n    debug: () => {\n      var _tableOptions$debugAl;\n      return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];\n    },\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange\n  };\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), getMemoOptions(table.options, 'debugCells', 'cell.getContext'))\n  };\n  table._features.forEach(feature => {\n    feature.createCell == null || feature.createCell(cell, column, row, table);\n  }, {});\n  return cell;\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns'))\n  };\n  for (const feature of table._features) {\n    feature.createColumn == null || feature.createColumn(column, table);\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column;\n}\n\nconst debug = 'debugHeaders';\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createHeader == null || feature.createHeader(header, table);\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      var _left$map$filter, _right$map$filter;\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n      return headerGroups;\n    }, getMemoOptions(table.options, debug, 'getHeaderGroups'));\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n    }, getMemoOptions(table.options, debug, 'getCenterHeaderGroups'));\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n      var _left$map$filter2;\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n    }, getMemoOptions(table.options, debug, 'getLeftHeaderGroups'));\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n      var _right$map$filter2;\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n    }, getMemoOptions(table.options, debug, 'getRightHeaderGroups'));\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getFooterGroups'));\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getLeftFooterGroups'));\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getCenterFooterGroups'));\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getRightFooterGroups'));\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return headerGroups.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getFlatHeaders'));\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeftFlatHeaders'));\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getCenterFlatHeaders'));\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getRightFlatHeaders'));\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders;\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getCenterLeafHeaders'));\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders2;\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getLeftLeafHeaders'));\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders3;\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getRightLeafHeaders'));\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n        return header.getLeafHeaders();\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeafHeaders'));\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCells')),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId'))\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    feature == null || feature.createRow == null || feature.createRow(row, table);\n  }\n  return row;\n};\n\n//\n\nconst ColumnFaceting = {\n  createColumn: (column, table) => {\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return column._getFacetedRowModel();\n    };\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map();\n      }\n      return column._getFacetedUniqueValues();\n    };\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined;\n      }\n      return column._getFacetedMinMaxValues();\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst ColumnFiltering = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return filterFns.includesString;\n      }\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange;\n      }\n      if (typeof value === 'boolean') {\n        return filterFns.equals;\n      }\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals;\n      }\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes;\n      }\n      return filterFns.weakEquals;\n    };\n    column.getFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n    };\n    column.getCanFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n    };\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\n    column.getFilterValue = () => {\n      var _table$getState$colum;\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\n    };\n    column.getFilterIndex = () => {\n      var _table$getState$colum2, _table$getState$colum3;\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\n    };\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn();\n        const previousFilter = old == null ? void 0 : old.find(d => d.id === column.id);\n        const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : undefined);\n\n        //\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n          var _old$filter;\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n        }\n        const newFilterObj = {\n          id: column.id,\n          value: newFilter\n        };\n        if (previousFilter) {\n          var _old$map;\n          return (_old$map = old == null ? void 0 : old.map(d => {\n            if (d.id === column.id) {\n              return newFilterObj;\n            }\n            return d;\n          })) != null ? _old$map : [];\n        }\n        if (old != null && old.length) {\n          return [...old, newFilterObj];\n        }\n        return [newFilterObj];\n      });\n    };\n  },\n  createRow: (row, _table) => {\n    row.columnFilters = {};\n    row.columnFiltersMeta = {};\n  },\n  createTable: table => {\n    table.setColumnFilters = updater => {\n      const leafColumns = table.getAllLeafColumns();\n      const updateFn = old => {\n        var _functionalUpdate;\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id);\n          if (column) {\n            const filterFn = column.getFilterFn();\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      };\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\n    };\n    table.resetColumnFilters = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n    };\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n      }\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getFilteredRowModel();\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst ColumnGrouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old != null && old.includes(column.id)) {\n          return old.filter(d => d !== column.id);\n        }\n        return [...(old != null ? old : []), column.id];\n      });\n    };\n    column.getCanGroup = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGrouping) != null ? _table$options$enable : true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);\n    };\n    column.getIsGrouped = () => {\n      var _table$getState$group;\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n    };\n    column.getGroupedIndex = () => {\n      var _table$getState$group2;\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n    };\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup();\n      return () => {\n        if (!canGroup) return;\n        column.toggleGrouping();\n      };\n    };\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'number') {\n        return aggregationFns.sum;\n      }\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent;\n      }\n    };\n    column.getAggregationFn = () => {\n      var _table$options$aggreg, _table$options$aggreg2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n    };\n  },\n  createTable: table => {\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n    table.resetGrouping = defaultState => {\n      var _table$initialState$g, _table$initialState;\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n    };\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n      }\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel();\n      }\n      return table._getGroupedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.getIsGrouped = () => !!row.groupingColumnId;\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.columnDef.getGroupingValue)) {\n        return row.getValue(columnId);\n      }\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n      return row._groupingValuesCache[columnId];\n    };\n    row._groupingValuesCache = {};\n  },\n  createCell: (cell, column, row, table) => {\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\n    cell.getIsAggregated = () => {\n      var _row$subRows;\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst ColumnOrdering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getIndex = memo(position => [_getVisibleLeafColumns(table, position)], columns => columns.findIndex(d => d.id === column.id), getMemoOptions(table.options, 'debugColumns', 'getIndex'));\n    column.getIsFirstColumn = position => {\n      var _columns$;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;\n    };\n    column.getIsLastColumn = position => {\n      var _columns;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;\n    };\n  },\n  createTable: table => {\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n    table.resetColumnOrder = defaultState => {\n      var _table$initialState$c;\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n    };\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n      // Sort grouped columns to the start of the column list\n      // before the headers are built\n      let orderedColumns = [];\n\n      // If there is no order, return the normal columns\n      if (!(columnOrder != null && columnOrder.length)) {\n        orderedColumns = columns;\n      } else {\n        const columnOrderCopy = [...columnOrder];\n\n        // If there is an order, make a copy of the columns\n        const columnsCopy = [...columns];\n\n        // And make a new ordered array of the columns\n\n        // Loop over the columns and place them in order into the new array\n        while (columnsCopy.length && columnOrderCopy.length) {\n          const targetColumnId = columnOrderCopy.shift();\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n          if (foundIndex > -1) {\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n          }\n        }\n\n        // If there are any columns left, add them to the end\n        orderedColumns = [...orderedColumns, ...columnsCopy];\n      }\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\n    }, getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn'));\n  }\n};\n\n//\n\nconst getDefaultColumnPinningState = () => ({\n  left: [],\n  right: []\n});\nconst ColumnPinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.pin = position => {\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n      table.setColumnPinning(old => {\n        var _old$left3, _old$right3;\n        if (position === 'right') {\n          var _old$left, _old$right;\n          return {\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n          };\n        }\n        if (position === 'left') {\n          var _old$left2, _old$right2;\n          return {\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        }\n        return {\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n        };\n      });\n    };\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns();\n      return leafColumns.some(d => {\n        var _d$columnDef$enablePi, _ref, _table$options$enable;\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);\n      });\n    };\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\n      const {\n        left,\n        right\n      } = table.getState().columnPinning;\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n      return isLeft ? 'left' : isRight ? 'right' : false;\n    };\n    column.getPinnedIndex = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      const position = column.getIsPinned();\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n    };\n  },\n  createRow: (row, table) => {\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells'));\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'left'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells'));\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'right'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells'));\n  },\n  createTable: table => {\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n    table.resetColumnPinning = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());\n    };\n    table.getIsSomeColumnsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().columnPinning;\n      if (!position) {\n        var _pinningState$left, _pinningState$right;\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns'));\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns'));\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\n    }, getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns'));\n  }\n};\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getSize = () => {\n      var _column$columnDef$min, _ref, _column$columnDef$max;\n      const columnSize = table.getState().columnSizing[column.id];\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n    };\n    column.getStart = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getStart'));\n    column.getAfter = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getAfter'));\n    column.resetSize = () => {\n      table.setColumnSizing(_ref2 => {\n        let {\n          [column.id]: _,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    };\n    column.getCanResize = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n    };\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\n    };\n  },\n  createHeader: (header, table) => {\n    header.getSize = () => {\n      let sum = 0;\n      const recurse = header => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse);\n        } else {\n          var _header$column$getSiz;\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n        }\n      };\n      recurse(header);\n      return sum;\n    };\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n      }\n      return 0;\n    };\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id);\n      const canResize = column == null ? void 0 : column.getCanResize();\n      return e => {\n        if (!column || !canResize) {\n          return;\n        }\n        e.persist == null || e.persist();\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return;\n          }\n        }\n        const startSize = header.getSize();\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n        const newColumnSizing = {};\n        const updateOffset = (eventType, clientXPos) => {\n          if (typeof clientXPos !== 'number') {\n            return;\n          }\n          table.setColumnSizingInfo(old => {\n            var _old$startOffset, _old$startSize;\n            const deltaDirection = table.options.columnResizeDirection === 'rtl' ? -1 : 1;\n            const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n            old.columnSizingStart.forEach(_ref3 => {\n              let [columnId, headerSize] = _ref3;\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n            });\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage\n            };\n          });\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing\n            }));\n          }\n        };\n        const onMove = clientXPos => updateOffset('move', clientXPos);\n        const onEnd = clientXPos => {\n          updateOffset('end', clientXPos);\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: []\n          }));\n        };\n        const contextDocument = _contextDocument || typeof document !== 'undefined' ? document : null;\n        const mouseEvents = {\n          moveHandler: e => onMove(e.clientX),\n          upHandler: e => {\n            contextDocument == null || contextDocument.removeEventListener('mousemove', mouseEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('mouseup', mouseEvents.upHandler);\n            onEnd(e.clientX);\n          }\n        };\n        const touchEvents = {\n          moveHandler: e => {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onMove(e.touches[0].clientX);\n            return false;\n          },\n          upHandler: e => {\n            var _e$touches$;\n            contextDocument == null || contextDocument.removeEventListener('touchmove', touchEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('touchend', touchEvents.upHandler);\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n          }\n        };\n        const passiveIfSupported = passiveEventSupported() ? {\n          passive: false\n        } : false;\n        if (isTouchStartEvent(e)) {\n          contextDocument == null || contextDocument.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n        } else {\n          contextDocument == null || contextDocument.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n        }\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id\n        }));\n      };\n    };\n  },\n  createTable: table => {\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n    table.resetColumnSizing = defaultState => {\n      var _table$initialState$c;\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n    };\n    table.resetHeaderSizeInfo = defaultState => {\n      var _table$initialState$c2;\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n    };\n    table.getTotalSize = () => {\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getHeaderGroup : 0;\n    };\n    table.getLeftTotalSize = () => {\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\n    };\n    table.getCenterTotalSize = () => {\n      var _table$getCenterHeade, _table$getCenterHeade2;\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getCenterHeade : 0;\n    };\n    table.getRightTotalSize = () => {\n      var _table$getRightHeader, _table$getRightHeader2;\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getRightHeader : 0;\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst ColumnVisibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value != null ? value : !column.getIsVisible()\n        }));\n      }\n    };\n    column.getIsVisible = () => {\n      var _ref, _table$getState$colum;\n      const childColumns = column.columns;\n      return (_ref = childColumns.length ? childColumns.some(c => c.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;\n    };\n    column.getCanHide = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n    };\n    column.getToggleVisibilityHandler = () => {\n      return e => {\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n      return cells.filter(cell => cell.column.getIsVisible());\n    }, getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells'));\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, 'debugRows', 'getVisibleCells'));\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, getMemoOptions(table.options, 'debugColumns', key));\n    };\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n    table.resetColumnVisibility = defaultState => {\n      var _table$initialState$c;\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n    };\n    table.toggleAllColumnsVisible = value => {\n      var _value;\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n        ...obj,\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n      }), {}));\n    };\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return e => {\n        var _target;\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nfunction _getVisibleLeafColumns(table, position) {\n  return !position ? table.getVisibleLeafColumns() : position === 'center' ? table.getCenterVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n}\n\n//\n\nconst GlobalFaceting = {\n  createTable: table => {\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getGlobalFacetedRowModel();\n    };\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map();\n      }\n      return table._getGlobalFacetedUniqueValues();\n    };\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return;\n      }\n      return table._getGlobalFacetedMinMaxValues();\n    };\n  }\n};\n\n//\n\nconst GlobalFiltering = {\n  getInitialState: state => {\n    return {\n      globalFilter: undefined,\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getCanGlobalFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;\n      return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n    };\n  },\n  createTable: table => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString;\n    };\n    table.getGlobalFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      const {\n        globalFilterFn: globalFilterFn\n      } = table.options;\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];\n    };\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\n    };\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n    };\n  }\n};\n\n//\n\nconst RowExpanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetExpanded = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetExpanded();\n          queued = false;\n        });\n      }\n    };\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true);\n      } else {\n        table.setExpanded({});\n      }\n    };\n    table.resetExpanded = defaultState => {\n      var _table$initialState$e, _table$initialState;\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n    };\n    table.getCanSomeRowsExpand = () => {\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n    };\n    table.getToggleAllRowsExpandedHandler = () => {\n      return e => {\n        e.persist == null || e.persist();\n        table.toggleAllRowsExpanded();\n      };\n    };\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n      return expanded === true || Object.values(expanded).some(Boolean);\n    };\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true;\n      }\n      if (!Object.keys(expanded).length) {\n        return false;\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false;\n      }\n\n      // They must all be expanded :shrug:\n      return true;\n    };\n    table.getExpandedDepth = () => {\n      let maxDepth = 0;\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n      rowIds.forEach(id => {\n        const splitId = id.split('.');\n        maxDepth = Math.max(maxDepth, splitId.length);\n      });\n      return maxDepth;\n    };\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n      }\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel();\n      }\n      return table._getExpandedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        var _expanded;\n        const exists = old === true ? true : !!(old != null && old[row.id]);\n        let oldExpanded = {};\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true;\n          });\n        } else {\n          oldExpanded = old;\n        }\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true\n          };\n        }\n        if (exists && !expanded) {\n          const {\n            [row.id]: _,\n            ...rest\n          } = oldExpanded;\n          return rest;\n        }\n        return old;\n      });\n    };\n    row.getIsExpanded = () => {\n      var _table$options$getIsR;\n      const expanded = table.getState().expanded;\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n    };\n    row.getCanExpand = () => {\n      var _table$options$getRow, _table$options$enable, _row$subRows;\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true;\n      let currentRow = row;\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true);\n        isFullyExpanded = currentRow.getIsExpanded();\n      }\n      return isFullyExpanded;\n    };\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand();\n      return () => {\n        if (!canExpand) return;\n        row.toggleExpanded();\n      };\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst RowPagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetPageIndex = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetPageIndex();\n          queued = false;\n        });\n      }\n    };\n    table.setPagination = updater => {\n      const safeUpdater = old => {\n        let newState = functionalUpdate(updater, old);\n        return newState;\n      };\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n    };\n    table.resetPagination = defaultState => {\n      var _table$initialState$p;\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n    };\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n        return {\n          ...old,\n          pageIndex\n        };\n      });\n    };\n    table.resetPageIndex = defaultState => {\n      var _table$initialState$p2, _table$initialState;\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n    };\n    table.resetPageSize = defaultState => {\n      var _table$initialState$p3, _table$initialState2;\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n    };\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n        const topRowIndex = old.pageSize * old.pageIndex;\n        const pageIndex = Math.floor(topRowIndex / pageSize);\n        return {\n          ...old,\n          pageIndex,\n          pageSize\n        };\n      });\n    };\n    //deprecated\n    table.setPageCount = updater => table.setPagination(old => {\n      var _table$options$pageCo;\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n      if (typeof newPageCount === 'number') {\n        newPageCount = Math.max(-1, newPageCount);\n      }\n      return {\n        ...old,\n        pageCount: newPageCount\n      };\n    });\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\n      let pageOptions = [];\n      if (pageCount && pageCount > 0) {\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n      }\n      return pageOptions;\n    }, getMemoOptions(table.options, 'debugTable', 'getPageOptions'));\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\n    table.getCanNextPage = () => {\n      const {\n        pageIndex\n      } = table.getState().pagination;\n      const pageCount = table.getPageCount();\n      if (pageCount === -1) {\n        return true;\n      }\n      if (pageCount === 0) {\n        return false;\n      }\n      return pageIndex < pageCount - 1;\n    };\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1);\n    };\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1;\n      });\n    };\n    table.firstPage = () => {\n      return table.setPageIndex(0);\n    };\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1);\n    };\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\n    table.getPaginationRowModel = () => {\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n      }\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel();\n      }\n      return table._getPaginationRowModel();\n    };\n    table.getPageCount = () => {\n      var _table$options$pageCo2;\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);\n    };\n    table.getRowCount = () => {\n      var _table$options$rowCou;\n      return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;\n    };\n  }\n};\n\n//\n\nconst getDefaultRowPinningState = () => ({\n  top: [],\n  bottom: []\n});\nconst RowPinning = {\n  getInitialState: state => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table)\n    };\n  },\n  createRow: (row, table) => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows ? row.getLeafRows().map(_ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }) : [];\n      const parentRowIds = includeParentRows ? row.getParentRows().map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return id;\n      }) : [];\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds]);\n      table.setRowPinning(old => {\n        var _old$top3, _old$bottom3;\n        if (position === 'bottom') {\n          var _old$top, _old$bottom;\n          return {\n            top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter(d => !(rowIds != null && rowIds.has(d))),\n            bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]\n          };\n        }\n        if (position === 'top') {\n          var _old$top2, _old$bottom2;\n          return {\n            top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],\n            bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n          };\n        }\n        return {\n          top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter(d => !(rowIds != null && rowIds.has(d))),\n          bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n        };\n      });\n    };\n    row.getCanPin = () => {\n      var _ref3;\n      const {\n        enableRowPinning,\n        enablePinning\n      } = table.options;\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row);\n      }\n      return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;\n    };\n    row.getIsPinned = () => {\n      const rowIds = [row.id];\n      const {\n        top,\n        bottom\n      } = table.getState().rowPinning;\n      const isTop = rowIds.some(d => top == null ? void 0 : top.includes(d));\n      const isBottom = rowIds.some(d => bottom == null ? void 0 : bottom.includes(d));\n      return isTop ? 'top' : isBottom ? 'bottom' : false;\n    };\n    row.getPinnedIndex = () => {\n      var _ref4, _visiblePinnedRowIds$;\n      const position = row.getIsPinned();\n      if (!position) return -1;\n      const visiblePinnedRowIds = (_ref4 = position === 'top' ? table.getTopRows() : table.getBottomRows()) == null ? void 0 : _ref4.map(_ref5 => {\n        let {\n          id\n        } = _ref5;\n        return id;\n      });\n      return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;\n    };\n  },\n  createTable: table => {\n    table.setRowPinning = updater => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);\n    table.resetRowPinning = defaultState => {\n      var _table$initialState$r, _table$initialState;\n      return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());\n    };\n    table.getIsSomeRowsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().rowPinning;\n      if (!position) {\n        var _pinningState$top, _pinningState$bottom;\n        return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table._getPinnedRows = (visibleRows, pinnedRowIds, position) => {\n      var _table$options$keepPi;\n      const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ?\n      //get all rows that are pinned even if they would not be otherwise visible\n      //account for expanded parent rows, but not pagination or filtering\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => {\n        const row = table.getRow(rowId, true);\n        return row.getIsAllParentsExpanded() ? row : null;\n      }) :\n      //else get only visible rows that are pinned\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => visibleRows.find(row => row.id === rowId));\n      return rows.filter(Boolean).map(d => ({\n        ...d,\n        position\n      }));\n    };\n    table.getTopRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top], (allRows, topPinnedRowIds) => table._getPinnedRows(allRows, topPinnedRowIds, 'top'), getMemoOptions(table.options, 'debugRows', 'getTopRows'));\n    table.getBottomRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.bottom], (allRows, bottomPinnedRowIds) => table._getPinnedRows(allRows, bottomPinnedRowIds, 'bottom'), getMemoOptions(table.options, 'debugRows', 'getBottomRows'));\n    table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {\n      const topAndBottom = new Set([...(top != null ? top : []), ...(bottom != null ? bottom : [])]);\n      return allRows.filter(d => !topAndBottom.has(d.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterRows'));\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n  createTable: table => {\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n    table.resetRowSelection = defaultState => {\n      var _table$initialState$r;\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n    };\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return;\n            }\n            rowSelection[row.id] = true;\n          });\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id];\n          });\n        }\n        return rowSelection;\n      });\n    };\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n      const rowSelection = {\n        ...old\n      };\n      table.getRowModel().rows.forEach(row => {\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);\n      });\n      return rowSelection;\n    });\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel'));\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel'));\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel'));\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n      if (isAllRowsSelected) {\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n          isAllRowsSelected = false;\n        }\n      }\n      return isAllRowsSelected;\n    };\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n        isAllPageRowsSelected = false;\n      }\n      return isAllPageRowsSelected;\n    };\n    table.getIsSomeRowsSelected = () => {\n      var _table$getState$rowSe;\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n    };\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n    };\n    table.getToggleAllRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllRowsSelected(e.target.checked);\n      };\n    };\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllPageRowsSelected(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected();\n      table.setRowSelection(old => {\n        var _opts$selectChildren;\n        value = typeof value !== 'undefined' ? value : !isSelected;\n        if (row.getCanSelect() && isSelected === value) {\n          return old;\n        }\n        const selectedRowIds = {\n          ...old\n        };\n        mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);\n        return selectedRowIds;\n      });\n    };\n    row.getIsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isRowSelected(row, rowSelection);\n    };\n    row.getIsSomeSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'some';\n    };\n    row.getIsAllSubRowsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'all';\n    };\n    row.getCanSelect = () => {\n      var _table$options$enable;\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row);\n      }\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n    };\n    row.getCanSelectSubRows = () => {\n      var _table$options$enable2;\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row);\n      }\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n    };\n    row.getCanMultiSelect = () => {\n      var _table$options$enable3;\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row);\n      }\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n    };\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect();\n      return e => {\n        var _target;\n        if (!canSelect) return;\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {\n  var _row$subRows;\n  const row = table.getRow(id, true);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  var _row$subRows3;\n  if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;\n  let allChildrenSelected = true;\n  let someSelected = false;\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return;\n    }\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection);\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true;\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true;\n        allChildrenSelected = false;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n  });\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst RowSorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n      let isString = false;\n      for (const row of firstRows) {\n        const value = row == null ? void 0 : row.getValue(column.id);\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime;\n        }\n        if (typeof value === 'string') {\n          isString = true;\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric;\n          }\n        }\n      }\n      if (isString) {\n        return sortingFns.text;\n      }\n      return sortingFns.basic;\n    };\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return 'asc';\n      }\n      return 'desc';\n    };\n    column.getSortingFn = () => {\n      var _table$options$sortin, _table$options$sortin2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n    };\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder();\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n        let newSorting = [];\n\n        // What should we do with this sort action?\n        let sortAction;\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n        // Multi-mode\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'add';\n          }\n        } else {\n          // Normal mode\n          if (old != null && old.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace';\n          } else if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'replace';\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove';\n            }\n          }\n        }\n        if (sortAction === 'add') {\n          var _table$options$maxMul;\n          newSorting = [...old, {\n            id: column.id,\n            desc: nextDesc\n          }];\n          // Take latest n columns\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc\n              };\n            }\n            return d;\n          });\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id);\n        } else {\n          newSorting = [{\n            id: column.id,\n            desc: nextDesc\n          }];\n        }\n        return newSorting;\n      });\n    };\n    column.getFirstSortDir = () => {\n      var _ref, _column$columnDef$sor;\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n      return sortDescFirst ? 'desc' : 'asc';\n    };\n    column.getNextSortingOrder = multi => {\n      var _table$options$enable, _table$options$enable2;\n      const firstSortDirection = column.getFirstSortDir();\n      const isSorted = column.getIsSorted();\n      if (!isSorted) {\n        return firstSortDirection;\n      }\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n      // If enableSortRemove, enable in general\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false;\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc';\n    };\n    column.getCanSort = () => {\n      var _column$columnDef$ena, _table$options$enable3;\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n    };\n    column.getCanMultiSort = () => {\n      var _ref2, _column$columnDef$ena2;\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n    };\n    column.getIsSorted = () => {\n      var _table$getState$sorti;\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n    };\n    column.getSortIndex = () => {\n      var _table$getState$sorti2, _table$getState$sorti3;\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n    };\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n    };\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort();\n      return e => {\n        if (!canSort) return;\n        e.persist == null || e.persist();\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n      };\n    };\n  },\n  createTable: table => {\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n    table.resetSorting = defaultState => {\n      var _table$initialState$s, _table$initialState;\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n    };\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\n      }\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel();\n      }\n      return table._getSortedRowModel();\n    };\n  }\n};\n\nconst builtInFeatures = [Headers, ColumnVisibility, ColumnOrdering, ColumnPinning, ColumnFaceting, ColumnFiltering, GlobalFaceting,\n//depends on ColumnFaceting\nGlobalFiltering,\n//depends on ColumnFiltering\nRowSorting, ColumnGrouping,\n//depends on RowSorting\nRowExpanding, RowPagination, RowPinning, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$_features, _options$initialState;\n  if (process.env.NODE_ENV !== 'production' && (options.debugAll || options.debugTable)) {\n    console.info('Creating Table Instance...');\n  }\n  const _features = [...builtInFeatures, ...((_options$_features = options._features) != null ? _options$_features : [])];\n  let table = {\n    _features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null || table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id, searchAll) => {\n      let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id];\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`);\n          }\n          throw new Error();\n        }\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, getMemoOptions(options, 'debugColumns', 'getAllColumns')),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index];\n    feature == null || feature.createTable == null || feature.createTable(table);\n  }\n  return table;\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel'));\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    var _facetedRowModel$flat;\n    if (!facetedRowModel) return undefined;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues'));\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel'));\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, getMemoOptions(table.options, 'debugTable', `getFacetedUniqueValues_${columnId}`));\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = (columnFilters != null ? columnFilters : []).map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      rowModel.rows.forEach(row => {\n        row.depth = 0;\n        row.parentId = undefined;\n      });\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Perform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n        subRows.forEach(subRow => {\n          subRow.parentId = id;\n        });\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n    table._queue(() => {\n      table._autoResetExpanded();\n      table._autoResetPageIndex();\n    });\n  }));\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel'));\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.map(row => ({\n        ...row\n      }));\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const sortUndefined = columnInfo.sortUndefined;\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          let sortInt = 0;\n\n          // All sorting ints should always return in ascending order\n          if (sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = aValue === undefined;\n            const bUndefined = bValue === undefined;\n            if (aUndefined || bUndefined) {\n              if (sortUndefined === 'first') return aUndefined ? -1 : 1;\n              if (sortUndefined === 'last') return aUndefined ? 1 : -1;\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? sortUndefined : -sortUndefined;\n            }\n          }\n          if (sortInt === 0) {\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          }\n\n          // If sorting is non-zero, take care of desc and inversion\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () => table._autoResetPageIndex()));\n}\n\nexport { ColumnFaceting, ColumnFiltering, ColumnGrouping, ColumnOrdering, ColumnPinning, ColumnSizing, ColumnVisibility, GlobalFaceting, GlobalFiltering, Headers, RowExpanding, RowPagination, RowPinning, RowSelection, RowSorting, _getVisibleLeafColumns, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getMemoOptions, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","/**\n   * react-table\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\nimport * as React from 'react';\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\nfunction isClassComponent(component) {\n  return typeof component === 'function' && (() => {\n    const proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  })();\n}\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    ...options\n  };\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable(resolvedOptions)\n  }));\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState);\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater);\n      options.onStateChange == null || options.onStateChange(updater);\n    }\n  }));\n  return tableRef.current;\n}\n\nexport { flexRender, useReactTable };\n//# sourceMappingURL=index.mjs.map\n","import { Button, buttonVariants } from \"./button\";\nimport { Heading } from \"./heading\";\nimport { Input } from \"./input\";\nimport { ScrollArea, ScrollBar } from \"./scroll-area\";\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n} from \"@/Components/ui/pagination\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/Components/ui/table\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  searchKey: string;\n  apiEndpoint: string;\n  title: string;\n  description: string;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  searchKey,\n  apiEndpoint,\n  title,\n  description,\n}: DataTableProps<TData, TValue>) {\n  const [data, setData] = useState<TData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  const [totalRows, setTotalRows] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  const numberOfPages = Math.ceil(totalRows / perPage);\n  const visiblePages = 2;\n\n  const fetchTableData = async () => {\n    setLoading(true);\n    const response = await fetch(\n      `${apiEndpoint}?page=${page}&perPage=${perPage}&search=${search}`,\n    );\n    const json = await response.json();\n    setData(json.data);\n    setTotalRows(json.total);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTableData();\n  }, [apiEndpoint, page, perPage, search]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    state: {\n      pagination: {\n        pageIndex: page - 1,\n        pageSize: perPage,\n      },\n    },\n  });\n\n  const handleSubmit = (e) => {\n    debounced(e.target.value);\n  };\n\n  const debounced = useDebouncedCallback(\n    // function\n    (value) => {\n      setSearch(value);\n      setPage(1);\n    },\n    // delay in ms0\n    500,\n  );\n\n  const getPaginationRange = () => {\n    const startPage = Math.max(1, page - Math.floor(visiblePages / 2));\n    const endPage = Math.min(numberOfPages, startPage + visiblePages - 1);\n    const range: number[] = []; // Explicitly declare the type\n\n    for (let i = startPage; i <= endPage; i++) {\n      range.push(i); // i is inferred as a number\n    }\n    return range;\n  };\n\n  return (\n    <>\n      <Heading title={`${title} (${totalRows})`} description={description} />\n\n      <Input\n        placeholder={`Search ${searchKey}...`}\n        onChange={(e) => handleSubmit(e)}\n        className=\"md:max-w-sm w-full my-2\"\n      />\n\n      <ScrollArea className=\"max-w-7xl h-[calc(80vh-220px)] rounded-md border\">\n        <Table className=\"md:w-full relative\">\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext(),\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : table.getRowModel().rows.length > 0 ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      <div className=\"line-clamp-2\">\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext(),\n                        )}\n                      </div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-sm text-gray-700\">\n          Showing {(page - 1) * perPage + 1} to{\" \"}\n          {Math.min(page * perPage, totalRows)} of {totalRows} entries\n        </div>\n      </div>\n\n      <Pagination>\n        <PaginationContent>\n          <PaginationItem>\n            <Button\n              disabled={page === 1}\n              onClick={() => setPage(Math.max(page - 1, 1))}\n            >\n              <ChevronLeft />\n            </Button>\n          </PaginationItem>\n\n          {page > 1 + visiblePages / 2 && (\n            <>\n              <PaginationItem className=\"cursor-pointer\">\n                <PaginationLink onClick={() => setPage(1)}>1</PaginationLink>\n              </PaginationItem>\n              <PaginationItem>\n                <PaginationEllipsis />\n              </PaginationItem>\n            </>\n          )}\n\n          {getPaginationRange().map((pageNum) => (\n            <PaginationItem key={pageNum}>\n              <PaginationLink\n                isActive={page === pageNum}\n                onClick={() => setPage(pageNum)}\n                className={\n                  page === pageNum\n                    ? `${buttonVariants()} cursor-default hover:text-white`\n                    : \"cursor-pointer\"\n                }\n              >\n                {pageNum}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n\n          {page < numberOfPages - visiblePages / 2 && (\n            <>\n              <PaginationItem>\n                <PaginationEllipsis />\n              </PaginationItem>\n\n              <PaginationItem className=\"cursor-pointer\">\n                <PaginationLink onClick={() => setPage(numberOfPages)}>\n                  {numberOfPages}\n                </PaginationLink>\n              </PaginationItem>\n            </>\n          )}\n          <PaginationItem>\n            <Button\n              disabled={page === numberOfPages}\n              onClick={() => setPage(Math.min(page + 1, numberOfPages))}\n            >\n              <ChevronRight />\n            </Button>\n          </PaginationItem>\n        </PaginationContent>\n      </Pagination>\n    </>\n  );\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","memo","getDeps","fn","opts","result","deps","depArgs","depTime","debug","Date","now","newDeps","length","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","getMemoOptions","tableOptions","debugLevel","_tableOptions$debugAl","debugAll","createHeader","table","column","options","_options$id","header","id","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","push","getContext","_features","forEach","feature","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","_left$map$filter","_right$map$filter","leftColumns","find","columnId","filter","Boolean","rightColumns","buildHeaderGroups","includes","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","getRightHeaderGroups","_right$map$filter2","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","flat","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","columns","getIsVisible","_column$columns","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","parent","bottomHeaders","recurseHeadersForSpans","childRowSpans","_ref","childColSpan","childRowSpan","createRow","original","rowIndex","subRows","parentId","row","_valuesCache","_uniqueValuesCache","getValue","hasOwnProperty","getColumn","accessorFn","getUniqueValues","columnDef","renderValue","_row$getValue","renderFallbackValue","getLeafRows","arr","getChildren","recurse","subArr","item","children","flattenBy","getParentRow","getRow","getParentRows","parentRows","currentRow","parentRow","getAllCells","getAllLeafColumns","cell","_cell$getValue","createCell","_getAllCellsByColumnId","allCells","reduce","acc","i","ColumnFaceting","createColumn","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","includesString","filterValue","search","toLowerCase","toString","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","Number","isNaN","Infinity","temp","max2","filterFns","ColumnFiltering","getDefaultColumnDef","filterFn","getInitialState","state","columnFilters","getDefaultOptions","onColumnFiltersChange","filterFromLeafRows","maxLeafRowFilterDepth","getAutoFilterFn","firstRow","getCoreRowModel","flatRows","value","Array","isArray","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_column$columnDef$ena","_table$options$enable","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","findIndex","setFilterValue","setColumnFilters","previousFilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_table","columnFiltersMeta","_functionalUpdate","resetColumnFilters","defaultState","_table$initialState$c","_table$initialState","initialState","getFilteredRowModel","_getFilteredRowModel","manualFiltering","aggregationFns","sum","_leafRows","childRows","next","nextValue","min2","extent","mean","leafRows","count","median","values","every","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","size","_columnId","ColumnGrouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getGroupingValue","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","Object","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","Error","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","getIsPlaceholder","getIsAggregated","_row$subRows","ColumnOrdering","columnOrder","onColumnOrderChange","getIndex","position","_getVisibleLeafColumns","getIsFirstColumn","_columns$","getIsLastColumn","_columns","setColumnOrder","resetColumnOrder","_getOrderColumnsFn","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","nonGroupingColumns","col","g","orderColumns","ColumnPinning","onColumnPinningChange","pin","columnIds","getLeafColumns","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","enableColumnPinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","leftAndRight","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","defaultColumnSizing","minSize","maxSize","MAX_SAFE_INTEGER","ColumnSizing","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","columnResizeMode","columnResizeDirection","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","slice","getAfter","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","_header$column$getSiz","header2","prevSiblingHeader","getResizeHandler","_contextDocument","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","deltaDirection","_ref3","headerSize","onMove","onEnd","contextDocument","document","mouseEvents","moveHandler","upHandler","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveSupported","supported","passive","noop","window","addEventListener","err","passiveEventSupported","resetColumnSizing","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","type","getCenterVisibleLeafColumns","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","getRowModel","rows","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","keys","selectRowsFn","rowsById","getFilteredSelectedRowModel","getGroupedSelectedRowModel","getSortedRowModel","isAllRowsSelected","paginationFlatRows","getPaginationRowModel","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","_opts$selectChildren","selectedRowIds","selectChildren","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","_table$options$enable3","getToggleSelectedHandler","canSelect","_target","includeChildren","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","_row$subRows3","allChildrenSelected","someSelected","subRow","subRowChildrenSelected","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","split","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","builtInFeatures","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","childColumns","c","enableHiding","getToggleVisibilityHandler","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","globalFilter","onGlobalFilterChange","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","getCanGlobalFilter","_table$options$getCol","enableGlobalFilter","getGlobalAutoFilterFn","getGlobalFilterFn","setGlobalFilter","resetGlobalFilter","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","_column$columnDef$ena2","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","getCanSomeRowsExpand","getPrePaginationRowModel","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","getIsExpanded","getExpandedDepth","splitId","getPreExpandedRowModel","getExpandedRowModel","_getExpandedRowModel","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","getRowCanExpand","enableExpanding","getIsAllParentsExpanded","isFullyExpanded","getToggleExpandedHandler","canExpand","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","_table$initialState2","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","getCanPreviousPage","getCanNextPage","previousPage","nextPage","firstPage","lastPage","_getPaginationRowModel","_table$options$pageCo2","ceil","getRowCount","_table$options$rowCou","rowCount","rowPinning","top","bottom","onRowPinningChange","includeLeafRows","includeParentRows","leafRowIds","parentRowIds","rowIds","setRowPinning","_old$top3","_old$bottom3","_old$top","_old$bottom","_old$top2","_old$bottom2","has","enableRowPinning","isTop","isBottom","_ref4","_visiblePinnedRowIds$","visiblePinnedRowIds","getTopRows","getBottomRows","_ref5","resetRowPinning","getIsSomeRowsPinned","_pinningState$top","_pinningState$bottom","_getPinnedRows","visibleRows","pinnedRowIds","_table$options$keepPi","keepPinnedRows","allRows","topPinnedRowIds","bottomPinnedRowIds","getCenterRows","topAndBottom","_options$_features","_options$initialState","defaultOptions","assign","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","searchAll","_getDefaultColumnDef","defaultColumn","_defaultColumn","resolvedColumnDef","accessorKey","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","_resolvedColumnDef$id","replace","originalRow","_result","getFlatColumns","flatMap","_column$columns2","groupingColumnDef","_getAllFlatColumnsById","flatColumns","flexRender","Comp","component","proto","getPrototypeOf","isReactComponent","isClassComponent","$$typeof","description","isExoticComponent","React.createElement","DataTable","searchKey","apiEndpoint","title","data","setData","useState","loading","setLoading","page","setPage","perPage","setPerPage","totalRows","setTotalRows","setSearch","numberOfPages","useEffect","async","response","fetch","json","total","resolvedOptions","tableRef","React.useState","current","prev","useReactTable","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","debounced","useDebouncedCallback","jsxRuntimeExports","jsxs","Fragment","jsx","Heading","Input","placeholder","handleSubmit","className","ScrollArea","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","ScrollBar","orientation","Pagination","PaginationContent","PaginationItem","Button","disabled","onClick","ChevronLeft","PaginationLink","PaginationEllipsis","startPage","visiblePages","endPage","range","getPaginationRange","pageNum","isActive","buttonVariants","ChevronRight"],"mappings":"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","x_google_ignoreList":[0,1]}