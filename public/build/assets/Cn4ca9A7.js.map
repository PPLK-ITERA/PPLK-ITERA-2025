{"version":3,"file":"Cn4ca9A7.js","sources":["../../../node_modules/qrcode.react/lib/esm/index.js","../../../resources/js/Components/dashboard/game-offline/Dapmen.tsx","../../../resources/js/Pages/Dashboard/game-offline/Page.tsx"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n","import { QRCodeSVG } from \"qrcode.react\";\nimport QRCode from \"react-qr-code\";\n\nimport React, { useState } from \"react\";\n\nimport { useForm } from \"@inertiajs/react\";\n\nimport { Button } from \"@/Components/ui/button\";\n\ninterface DapmenProps {\n    userId?: number;\n}\n\nexport default function Dapmen({ userId }: DapmenProps) {\n    const [loading, setLoading] = useState(false);\n    const { data, setData } = useForm({\n        code: \"\",\n        qrUrl: \"\",\n    });\n\n    const fetchQR = async () => {\n        setLoading(true);\n\n        const response = await fetch(route(\"poin.qrcode\", userId));\n        const json = await response.json();\n        setData(json.data);\n\n        setLoading(false);\n    };\n\n    return (\n        <>\n            <p>\n                Gunakan fitur ini untuk generate QR kelompok anda untuk di scan\n                oleh <span className=\"font-bold\">Korlap</span>\n            </p>\n\n            <div className=\"w-fit p-2 text-white bg-green-600 rounded-md\">\n                <p>Score Kelompok : 800</p>\n            </div>\n\n            <div className=\"flex flex-col items-center w-full gap-10\">\n                <div className=\"w-fit\">\n                    <p className=\"text-center\">\n                        Tunjukkan QR Code ini ke{\" \"}\n                        <span className=\"font-bold\">Korlap</span>\n                    </p>\n\n                    <div className=\"aspect-square bg-white border flex justify-center items-center mt-5 w-[300px] h-[300px] rounded-md\">\n                        {data.qrUrl === \"\" ? null : loading ? (\n                            <p>Loading...</p>\n                        ) : (\n                            // <QRCode size={256} value={data.code} />\n                            <QRCodeSVG\n                                value={data.code}\n                                // imageSettings={{\n                                //     src: \"https://kartatera.my.id/build/assets/D98J2HoG.png\",\n                                //     height: 60,\n                                //     width: 60,\n                                //     excavate: true,\n                                // }}\n                                size={256}\n                                includeMargin={false}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <Button\n                    onClick={() => {\n                        fetchQR();\n                    }}\n                >\n                    Generate QR Kelompok\n                </Button>\n            </div>\n        </>\n    );\n}\n","import DashboardLayout from \"@/Layouts/DashboardLayout\";\nimport { IDetectedBarcode, Scanner, outline } from \"@yudiel/react-qr-scanner\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { useForm } from \"@inertiajs/react\";\n\nimport Dapmen from \"@/Components/dashboard/game-offline/Dapmen\";\nimport { Breadcrumbs } from \"@/Components/ui/breadcrumbs\";\nimport { Button } from \"@/Components/ui/button\";\n\nconst breadcrumbItems = [\n    { title: \"Dashboard\", link: \"/dashboard\" },\n    { title: \"Game Offline\", link: \"/dashboard/game-offline\" },\n];\n\nexport default function Page({ auth, response }) {\n    const { data, setData, post, processing } = useForm({\n        qr_code: \"\",\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    const handleScan = (data: string) => {\n        if (data) {\n            setData(\"qr_code\", data);\n        }\n    };\n\n    useEffect(() => {\n        if (data.qr_code) {\n            post(route(\"poin.store\"));\n        }\n    }, [data.qr_code]);\n\n    return (\n        <DashboardLayout user={auth.user}>\n            <Breadcrumbs items={breadcrumbItems} />\n            <h2 className=\"text-3xl font-bold tracking-tight\">Game Offline</h2>\n\n            {auth.user.role_id === 3 ? (\n                <>\n                    <Dapmen userId={auth.user.id} />\n                </>\n            ) : null}\n\n            {auth.user.role_id === 3 ? (\n                <>\n                    <p>\n                        Gunakan fitur ini untuk scan QR kelompok dari{\" \"}\n                        <span className=\"font-bold\">Dapmen</span> yang menang\n                        pada game offline\n                    </p>\n\n                    <div className=\"flex flex-col items-center justify-center w-full\">\n                        <div className=\"md:w-96 border\">\n                            <Scanner\n                                onScan={function (\n                                    detectedCodes: IDetectedBarcode[],\n                                ): void {\n                                    handleScan(\n                                        detectedCodes.at(-1)?.rawValue || \"\",\n                                    );\n                                }}\n                                components={{\n                                    finder: true,\n                                    tracker: outline,\n                                    zoom: true,\n                                    torch: true,\n                                }}\n                                allowMultiple={true}\n                                scanDelay={2000}\n                                paused={loading}\n                                styles={{\n                                    container: {\n                                        width: \"100%\",\n                                    },\n                                }}\n                            />\n                        </div>\n\n                        <Button className=\"mt-5\">Scan QR Kelompok</Button>\n                    </div>\n                </>\n            ) : null}\n        </DashboardLayout>\n    );\n}\n"],"names":["qrcodegen","qrcodegen2","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","this","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","length","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substr","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","MARGIN_SIZE","DEFAULT_IMG_SCALE","QRCodeSVG","props","_a","level","bgColor","fgColor","includeMargin","imageSettings","otherProps","cells","margin","numCells","calculatedImageSettings","defaultSize","scale","w","width","h","height","excavation","excavate","floorX","floorY","getImageSettings","image","cell","React","createElement","xlinkHref","src","preserveAspectRatio","fgPath","ops","start","join","generatePath","viewBox","fill","d","shapeRendering","Dapmen","userId","loading","setLoading","useState","setData","useForm","code","qrUrl","jsxRuntimeExports","jsxs","Fragment","children","jsx","className","Button","onClick","async","response","fetch","route","json","Path2D","addPath","e","breadcrumbItems","title","link","Page","auth","post","processing","qr_code","useEffect","DashboardLayout","user","Breadcrumbs","items","role_id","id","Scanner","onScan","detectedCodes","at","rawValue","components","finder","tracker","outline","zoom","torch","allowMultiple","scanDelay","paused","styles","container"],"mappings":"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","x_google_ignoreList":[0]}