{"version":3,"file":"kRpfy8LZ.js","sources":["../../../resources/js/Pages/Dashboard/komdis/Scanner.tsx"],"sourcesContent":["import { IDetectedBarcode, Scanner, outline } from \"@yudiel/react-qr-scanner\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { Link, router, useForm } from \"@inertiajs/react\";\n\nimport DashboardLayout from \"@/Layouts/DashboardLayout\";\n\nimport { Button, buttonVariants } from \"@/Components/ui/button\";\nimport { Toaster } from \"@/Components/ui/toaster\";\nimport { useToast } from \"@/Components/ui/use-toast\";\n\nimport { useFlashToast } from \"@/lib/hooks/useFlashToast\";\n\nfunction Page({ auth }) {\n  const { toast } = useToast();\n\n  const [csrfToken, setCsrfToken] = useState(\"\");\n  const [result, setResult] = useState<string>(\"\");\n  const [error, setError] = useState<string>(\"\");\n  const [loading, setLoading] = useState(false);\n  const { data, setData, post, processing } = useForm({\n    qr_code: \"\",\n  });\n\n  const handleScan = async (data: string) => {\n    if (data) {\n      setLoading(true);\n      try {\n        // Kirim QR code langsung ke endpoint create dengan parameter qr_code\n        const response = await fetch(`/dashboard/komdis/create?qr_code=${encodeURIComponent(data)}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRF-TOKEN\": csrfToken,\n          },\n        });\n\n        const getResult = await response.json();\n\n        if (getResult.success) {\n          toast({\n            title: \"Mahasiswa Ditemukan\",\n            variant: \"default\",\n            description: `${getResult.data.name} - ${getResult.data.nim}`,\n          });\n          \n          // Redirect ke halaman komdis dengan data\n          setTimeout(() => {\n            router.get(route('dashboard.komdis.index'), {\n              userData: JSON.stringify(getResult.data),\n              redirectToInput: true\n            });\n          }, 1500);\n        } else {\n          toast({\n            title: \"Mahasiswa Tidak Ditemukan\",\n            variant: \"destructive\",\n            description: getResult.message || \"QR Code tidak terdaftar dalam sistem\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n        toast({\n          title: \"Error\",\n          variant: \"destructive\",\n          description: \"Terjadi kesalahan saat memproses QR code\",\n        });\n      }\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Fungsi untuk mendapatkan token CSRF dari API\n    const fetchCsrfToken = async () => {\n      try {\n        const response = await fetch(route(\"csrf\"));\n        const data = await response.json();\n        setCsrfToken(data.csrfToken);\n      } catch (error) {\n        console.error(\"Error fetching CSRF token:\", error);\n      }\n    };\n\n    fetchCsrfToken();\n  }, []);\n\n  useFlashToast();\n\n  return (\n    <>\n      <DashboardLayout user={auth.user}>\n        <div className=\"relative flex flex-col items-center justify-center w-full h-full\">\n          <div className=\"md:w-[100%] w-[75vw] h-[70vh] items-center justify-center\">\n            <h2 className=\"text-xl font-bold tracking-tight text-center mb-4\">\n              QR Scanner - Log Komdis\n            </h2>\n\n            {loading ? (\n              <div className=\"border-b-purple-900 flex items-center justify-center w-full h-full\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-2\"></div>\n                  <p>Memproses QR Code...</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-center w-full\">\n                <div className=\"md:w-64\">\n                  <Scanner\n                    onScan={function (detectedCodes: IDetectedBarcode[]): void {\n                      const latestCode = detectedCodes.at(-1)?.rawValue;\n                      if (latestCode) {\n                        handleScan(latestCode);\n                        setResult(latestCode);\n                      }\n                    }}\n                    components={{\n                      finder: true,\n                      tracker: outline,\n                      zoom: true,\n                    }}\n                    allowMultiple={true}\n                    scanDelay={2000}\n                    paused={loading}\n                    styles={{\n                      container: {\n                        width: \"100%\",\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex flex-col items-center gap-3 mt-4\">\n            <Link \n              href={route(\"dashboard.komdis.index\")} \n              className={buttonVariants()}\n            >\n              Input Manual\n            </Link>\n            \n            {result && (\n              <p className=\"md:block hidden text-sm text-gray-600\">\n                Last Scanned: {result.substring(0, 50)}{result.length > 50 ? '...' : ''}\n              </p>\n            )}\n          </div>\n        </div>\n      </DashboardLayout>\n      <Toaster />\n    </>\n  );\n}\n\nexport default Page;"],"names":["Page","auth","toast","useToast","csrfToken","setCsrfToken","useState","result","setResult","error","setError","loading","setLoading","useForm","qr_code","useEffect","async","response","fetch","route","data","json","console","fetchCsrfToken","useFlashToast","jsxs","Fragment","children","jsx","DashboardLayout","user","className","Scanner","onScan","detectedCodes","latestCode","_a","at","rawValue","encodeURIComponent","method","headers","getResult","success","title","variant","description","name","nim","setTimeout","router","get","userData","JSON","stringify","redirectToInput","message","handleScan","components","finder","tracker","outline","zoom","allowMultiple","scanDelay","paused","styles","container","width","Link","href","buttonVariants","substring","length","Toaster"],"mappings":"ohBAcA,SAASA,GAAKC,KAAEA,IACd,MAAMC,MAAEA,GAAUC,KAEXC,EAAWC,GAAgBC,EAAAA,SAAS,KACpCC,EAAQC,GAAaF,EAAAA,SAAiB,KACtCG,EAAOC,GAAYJ,EAAAA,SAAiB,KACpCK,EAASC,GAAcN,EAAAA,UAAS,GACKO,EAAQ,CAClDC,QAAS,KAoEX,OAjBAC,EAAAA,WAAU,KAEeC,WACrB,IACE,MAAMC,QAAiBC,MAAMC,MAAM,SAC7BC,QAAaH,EAASI,OAC5BhB,EAAae,EAAKhB,UACpB,OAASK,GACPa,QAAQb,MAAM,6BAA8BA,EAC9C,GAGFc,EAAA,GACC,IAEHC,IAGEC,EAAAA,KAAAC,WAAA,CACEC,SAAA,CAAAC,EAAAA,IAACC,GAAgBC,KAAM7B,EAAK6B,KAC1BH,SAAAF,EAAAA,KAAC,MAAA,CAAIM,UAAU,mEACbJ,SAAA,GAAAF,KAAC,MAAA,CAAIM,UAAU,4DACbJ,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGG,UAAU,oDAAoDJ,SAAA,4BAIjEhB,QACE,MAAA,CAAIoB,UAAU,qEACbJ,SAAAF,EAAAA,KAAC,MAAA,CAAIM,UAAU,cACbJ,SAAA,GAAAC,IAAC,MAAA,CAAIG,UAAU,gFACfH,IAAC,KAAED,SAAA,8BAIPC,EAAAA,IAAC,MAAA,CAAIG,UAAU,0CACbJ,WAAAC,IAAC,MAAA,CAAIG,UAAU,UACbJ,SAAAC,EAAAA,IAACI,EAAA,CACCC,OAAQ,SAAUC,SAChB,MAAMC,EAAa,OAAAC,EAAAF,EAAcG,IAAG,SAAjB,EAAAD,EAAsBE,SACrCH,IAvFLnB,OAAOI,IACxB,GAAIA,EAAM,CACRR,GAAW,GACX,IAEE,MAAMK,QAAiBC,MAAM,oCAAoCqB,mBAAmBnB,KAAS,CAC3FoB,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,eAAgBrC,KAIdsC,QAAkBzB,EAASI,OAE7BqB,EAAUC,SACZzC,EAAM,CACJ0C,MAAO,sBACPC,QAAS,UACTC,YAAa,GAAGJ,EAAUtB,KAAK2B,UAAUL,EAAUtB,KAAK4B,QAI1DC,YAAW,KACTC,EAAOC,IAAIhC,MAAM,0BAA2B,CAC1CiC,SAAUC,KAAKC,UAAUZ,EAAUtB,MACnCmC,iBAAiB,GAClB,GACA,OAEHrD,EAAM,CACJ0C,MAAO,4BACPC,QAAS,cACTC,YAAaJ,EAAUc,SAAW,wCAGxC,OAAS/C,GACPa,QAAQb,MAAM,SAAUA,GACxBP,EAAM,CACJ0C,MAAO,QACPC,QAAS,cACTC,YAAa,4CAEjB,CACAlC,GAAW,EACb,GA2CoB6C,CAAWtB,GACX3B,EAAU2B,GAEd,EACAuB,WAAY,CACVC,QAAQ,EACRC,QAASC,EACTC,MAAM,GAERC,eAAe,EACfC,UAAW,IACXC,OAAQtD,EACRuD,OAAQ,CACNC,UAAW,CACTC,MAAO,oBASrB3C,KAAC,MAAA,CAAIM,UAAU,wCACbJ,SAAA,CAAAC,EAAAA,IAACyC,EAAA,CACCC,KAAMnD,MAAM,0BACZY,UAAWwC,IACZ5C,SAAA,iBAIApB,GACCkB,EAAAA,KAAC,IAAA,CAAEM,UAAU,wCAAwCJ,SAAA,CAAA,iBACpCpB,EAAOiE,UAAU,EAAG,IAAKjE,EAAOkE,OAAS,GAAK,MAAQ,oBAM9EC,EAAA,CAAA,KAGP"}